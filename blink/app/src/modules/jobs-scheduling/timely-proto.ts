// generated by Proto2Typescript. do not touch!

/* tslint:disable */

declare module Proto2TypeScript {
    interface ProtoBufModel {
        toArrayBuffer(): ArrayBuffer;
        //toBuffer(): NodeBuffer;
        //encode(): ByteBuffer;
        toBase64(): string;
        toString(): string;
    }

    export interface ProtoBufBuilder {
        common: commonBuilder;
        net: netBuilder;
        scheduler: schedulerBuilder;
        util: utilBuilder;

    }
}

declare module Proto2TypeScript {

    export interface common extends ProtoBufModel {

    }

    export interface commonBuilder {
        new(): common;
        decode(buffer: ArrayBuffer) : common;
        //decode(buffer: NodeBuffer) : common;
        //decode(buffer: ByteArrayBuffer) : common;
        decode64(buffer: string) : common;
        ValueProto: common.ValueProtoBuilder;
        KeyValue: common.KeyValueBuilder;
        KeyValueStr: common.KeyValueStrBuilder;
        KeyValueList: common.KeyValueListBuilder;
        EntityHeader: common.EntityHeaderBuilder;
        MessageCode: common.MessageCodeBuilder;
        MessageCodeSet: common.MessageCodeSetBuilder;
        ContextMessageCode: common.ContextMessageCodeBuilder;
        StatusProto: common.StatusProtoBuilder;
        ErrorCode: common.ErrorCode;

    }
}

declare module Proto2TypeScript.common {

    export interface ValueProto extends ProtoBufModel {
        type?: ValueProto.Type;
        getType() : ValueProto.Type;
        setType(type : ValueProto.Type): void;
        i64?: number;
        getI64() : number;
        setI64(i64 : number): void;
        d?: number;
        getD() : number;
        setD(d : number): void;
        s?: string;
        getS() : string;
        setS(s : string): void;
        b?: boolean;
        getB() : boolean;
        setB(b : boolean): void;
        u64?: number;
        getU64() : number;
        setU64(u64 : number): void;

    }

    export interface ValueProtoBuilder {
        new(): ValueProto;
        decode(buffer: ArrayBuffer) : ValueProto;
        //decode(buffer: NodeBuffer) : ValueProto;
        //decode(buffer: ByteArrayBuffer) : ValueProto;
        decode64(buffer: string) : ValueProto;
        Type: ValueProto.Type;

    }
}

declare module Proto2TypeScript.common.ValueProto {
    export const enum Type {
        TYPE_NULL = 0,
        TYPE_INT64 = 1,
        TYPE_DOUBLE = 2,
        TYPE_STRING = 3,
        TYPE_BOOL = 4,
        TYPE_UINT64 = 5,

    }
}

declare module Proto2TypeScript.common {

    export interface KeyValue extends ProtoBufModel {
        key?: string;
        getKey() : string;
        setKey(key : string): void;
        value?: ValueProto;
        getValue() : ValueProto;
        setValue(value : ValueProto): void;
        description?: string;
        getDescription() : string;
        setDescription(description : string): void;
        deprecated_value?: KeyValue.DeprecatedValue;
        getDeprecatedValue() : KeyValue.DeprecatedValue;
        setDeprecatedValue(deprecatedValue : KeyValue.DeprecatedValue): void;

    }

    export interface KeyValueBuilder {
        new(): KeyValue;
        decode(buffer: ArrayBuffer) : KeyValue;
        //decode(buffer: NodeBuffer) : KeyValue;
        //decode(buffer: ByteArrayBuffer) : KeyValue;
        decode64(buffer: string) : KeyValue;
        DeprecatedValue: KeyValue.DeprecatedValueBuilder;

    }
}

declare module Proto2TypeScript.common.KeyValue {

    export interface DeprecatedValue extends ProtoBufModel {
        i64?: number;
        getI64() : number;
        setI64(i64 : number): void;
        d?: number;
        getD() : number;
        setD(d : number): void;
        s?: string;
        getS() : string;
        setS(s : string): void;

    }

    export interface DeprecatedValueBuilder {
        new(): DeprecatedValue;
        decode(buffer: ArrayBuffer) : DeprecatedValue;
        //decode(buffer: NodeBuffer) : DeprecatedValue;
        //decode(buffer: ByteArrayBuffer) : DeprecatedValue;
        decode64(buffer: string) : DeprecatedValue;

    }
}

declare module Proto2TypeScript.common {

    export interface KeyValueStr extends ProtoBufModel {
        key?: string;
        getKey() : string;
        setKey(key : string): void;
        value?: string;
        getValue() : string;
        setValue(value : string): void;

    }

    export interface KeyValueStrBuilder {
        new(): KeyValueStr;
        decode(buffer: ArrayBuffer) : KeyValueStr;
        //decode(buffer: NodeBuffer) : KeyValueStr;
        //decode(buffer: ByteArrayBuffer) : KeyValueStr;
        decode64(buffer: string) : KeyValueStr;

    }
}

declare module Proto2TypeScript.common {

    export interface KeyValueList extends ProtoBufModel {
        key?: string;
        getKey() : string;
        setKey(key : string): void;
        value: ValueProto[];
        getValue() : ValueProto[];
        setValue(value : ValueProto[]): void;
        description?: string;
        getDescription() : string;
        setDescription(description : string): void;

    }

    export interface KeyValueListBuilder {
        new(): KeyValueList;
        decode(buffer: ArrayBuffer) : KeyValueList;
        //decode(buffer: NodeBuffer) : KeyValueList;
        //decode(buffer: ByteArrayBuffer) : KeyValueList;
        decode64(buffer: string) : KeyValueList;

    }
}

declare module Proto2TypeScript.common {

    export interface EntityHeader extends ProtoBufModel {
        guid?: string;
        getGuid() : string;
        setGuid(guid : string): void;
        display_name?: string;
        getDisplayName() : string;
        setDisplayName(displayName : string): void;
        description?: string;
        getDescription() : string;
        setDescription(description : string): void;

    }

    export interface EntityHeaderBuilder {
        new(): EntityHeader;
        decode(buffer: ArrayBuffer) : EntityHeader;
        //decode(buffer: NodeBuffer) : EntityHeader;
        //decode(buffer: ByteArrayBuffer) : EntityHeader;
        decode64(buffer: string) : EntityHeader;

    }
}

declare module Proto2TypeScript.common {

    export interface MessageCode extends ProtoBufModel {
        severity?: MessageCode.Severity;
        getSeverity() : MessageCode.Severity;
        setSeverity(severity : MessageCode.Severity): void;
        code?: number;
        getCode() : number;
        setCode(code : number): void;
        summary?: string;
        getSummary() : string;
        setSummary(summary : string): void;
        detail?: string;
        getDetail() : string;
        setDetail(detail : string): void;
        action?: string;
        getAction() : string;
        setAction(action : string): void;
        external?: boolean;
        getExternal() : boolean;
        setExternal(external : boolean): void;

    }

    export interface MessageCodeBuilder {
        new(): MessageCode;
        decode(buffer: ArrayBuffer) : MessageCode;
        //decode(buffer: NodeBuffer) : MessageCode;
        //decode(buffer: ByteArrayBuffer) : MessageCode;
        decode64(buffer: string) : MessageCode;
        Severity: MessageCode.Severity;

    }
}

declare module Proto2TypeScript.common.MessageCode {
    export const enum Severity {
        INFO = 0,
        WARNING = 1,
        ERROR = 2,
        FATAL = 3,

    }
}

declare module Proto2TypeScript.common {

    export interface MessageCodeSet extends ProtoBufModel {
        message_code: MessageCode[];
        getMessageCode() : MessageCode[];
        setMessageCode(messageCode : MessageCode[]): void;

    }

    export interface MessageCodeSetBuilder {
        new(): MessageCodeSet;
        decode(buffer: ArrayBuffer) : MessageCodeSet;
        //decode(buffer: NodeBuffer) : MessageCodeSet;
        //decode(buffer: ByteArrayBuffer) : MessageCodeSet;
        decode64(buffer: string) : MessageCodeSet;

    }
}

declare module Proto2TypeScript.common {

    export interface ContextMessageCode extends ProtoBufModel {
        code?: number;
        getCode() : number;
        setCode(code : number): void;
        incident_id_guid?: string;
        getIncidentIdGuid() : string;
        setIncidentIdGuid(incidentIdGuid : string): void;
        trace_id_guid?: string;
        getTraceIdGuid() : string;
        setTraceIdGuid(traceIdGuid : string): void;
        debug?: string;
        getDebug() : string;
        setDebug(debug : string): void;
        parameter: string[];
        getParameter() : string[];
        setParameter(parameter : string[]): void;

    }

    export interface ContextMessageCodeBuilder {
        new(): ContextMessageCode;
        decode(buffer: ArrayBuffer) : ContextMessageCode;
        //decode(buffer: NodeBuffer) : ContextMessageCode;
        //decode(buffer: ByteArrayBuffer) : ContextMessageCode;
        decode64(buffer: string) : ContextMessageCode;

    }
}

declare module Proto2TypeScript.common {

    export interface StatusProto extends ProtoBufModel {
        code?: ErrorCode;
        getCode() : ErrorCode;
        setCode(code : ErrorCode): void;
        message?: string;
        getMessage() : string;
        setMessage(message : string): void;

    }

    export interface StatusProtoBuilder {
        new(): StatusProto;
        decode(buffer: ArrayBuffer) : StatusProto;
        //decode(buffer: NodeBuffer) : StatusProto;
        //decode(buffer: ByteArrayBuffer) : StatusProto;
        decode64(buffer: string) : StatusProto;

    }
}

declare module Proto2TypeScript.common {
    export const enum ErrorCode {
        OK = 0,
        ABORTED = 1,
        ALREADY_EXISTS = 2,
        BUSY = 3,
        CANCELLED = 4,
        INTERNAL = 5,
        INVALID_ARGUMENT = 6,
        LOAD_FAILED = 7,
        NOT_FOUND = 8,
        NOT_IMPLEMENTED = 9,
        PERMISSION_DENIED = 10,
        TIMEOUT = 11,
        NOT_READY = 12,
        UNKNOWN = 13,
        RESOURCE_EXCEEDED = 14,
        ALTER_TABLE_FAILED = 15,
        UNREACHABLE = 16,
        INVALID_TABLE_GRAPH = 17,
        CONNECTION_FAILED = 18,
        INVALID_JOIN_PATH = 19,
        TABLE_NOT_READY = 30000,
        ZOOKEEPER_ERROR = 50000,

    }
}

declare module Proto2TypeScript {

    export interface net extends ProtoBufModel {

    }

    export interface netBuilder {
        new(): net;
        decode(buffer: ArrayBuffer) : net;
        //decode(buffer: NodeBuffer) : net;
        //decode(buffer: ByteArrayBuffer) : net;
        decode64(buffer: string) : net;
        HostPort: net.HostPortBuilder;
        OrionAddress: net.OrionAddressBuilder;
        AddressProto: net.AddressProtoBuilder;

    }
}

declare module Proto2TypeScript.net {

    export interface HostPort extends ProtoBufModel {
        host?: string;
        getHost() : string;
        setHost(host : string): void;
        port?: number;
        getPort() : number;
        setPort(port : number): void;

    }

    export interface HostPortBuilder {
        new(): HostPort;
        decode(buffer: ArrayBuffer) : HostPort;
        //decode(buffer: NodeBuffer) : HostPort;
        //decode(buffer: ByteArrayBuffer) : HostPort;
        decode64(buffer: string) : HostPort;

    }
}

declare module Proto2TypeScript.net {

    export interface OrionAddress extends ProtoBufModel {
        zoo_server: HostPort[];
        getZooServer() : HostPort[];
        setZooServer(zooServer : HostPort[]): void;
        cluster_name?: string;
        getClusterName() : string;
        setClusterName(clusterName : string): void;
        service_name?: string;
        getServiceName() : string;
        setServiceName(serviceName : string): void;
        service_unit_index?: number;
        getServiceUnitIndex() : number;
        setServiceUnitIndex(serviceUnitIndex : number): void;
        task_name?: string;
        getTaskName() : string;
        setTaskName(taskName : string): void;
        port_name?: string;
        getPortName() : string;
        setPortName(portName : string): void;
        label: OrionAddress.Label[];
        getLabel() : OrionAddress.Label[];
        setLabel(label : OrionAddress.Label[]): void;

    }

    export interface OrionAddressBuilder {
        new(): OrionAddress;
        decode(buffer: ArrayBuffer) : OrionAddress;
        //decode(buffer: NodeBuffer) : OrionAddress;
        //decode(buffer: ByteArrayBuffer) : OrionAddress;
        decode64(buffer: string) : OrionAddress;
        Label: OrionAddress.LabelBuilder;

    }
}

declare module Proto2TypeScript.net.OrionAddress {

    export interface Label extends ProtoBufModel {
        key?: string;
        getKey() : string;
        setKey(key : string): void;
        value?: string;
        getValue() : string;
        setValue(value : string): void;

    }

    export interface LabelBuilder {
        new(): Label;
        decode(buffer: ArrayBuffer) : Label;
        //decode(buffer: NodeBuffer) : Label;
        //decode(buffer: ByteArrayBuffer) : Label;
        decode64(buffer: string) : Label;

    }
}

declare module Proto2TypeScript.net {

    export interface AddressProto extends ProtoBufModel {
        host_port?: HostPort;
        getHostPort() : HostPort;
        setHostPort(hostPort : HostPort): void;
        orion_address?: OrionAddress;
        getOrionAddress() : OrionAddress;
        setOrionAddress(orionAddress : OrionAddress): void;

    }

    export interface AddressProtoBuilder {
        new(): AddressProto;
        decode(buffer: ArrayBuffer) : AddressProto;
        //decode(buffer: NodeBuffer) : AddressProto;
        //decode(buffer: ByteArrayBuffer) : AddressProto;
        decode64(buffer: string) : AddressProto;

    }
}

declare module Proto2TypeScript {

    export interface scheduler extends ProtoBufModel {

    }

    export interface schedulerBuilder {
        new(): scheduler;
        decode(buffer: ArrayBuffer) : scheduler;
        //decode(buffer: NodeBuffer) : scheduler;
        //decode(buffer: ByteArrayBuffer) : scheduler;
        decode64(buffer: string) : scheduler;
        CronSchedule: scheduler.CronScheduleBuilder;
        OneTimeSchedule: scheduler.OneTimeScheduleBuilder;
        PeriodicSchedule: scheduler.PeriodicScheduleBuilder;
        TimeSchedule: scheduler.TimeScheduleBuilder;
        NodeSchedule: scheduler.NodeScheduleBuilder;
        ConstantBackoff: scheduler.ConstantBackoffBuilder;
        ExponentialBackoff: scheduler.ExponentialBackoffBuilder;
        BackoffPolicy: scheduler.BackoffPolicyBuilder;
        NumRetriesLimit: scheduler.NumRetriesLimitBuilder;
        TimeDeadlineLimit: scheduler.TimeDeadlineLimitBuilder;
        TerminationPolicy: scheduler.TerminationPolicyBuilder;
        RetryPolicy: scheduler.RetryPolicyBuilder;
        JobRunStateProto: scheduler.JobRunStateProtoBuilder;
        JobExitStatusProto: scheduler.JobExitStatusProtoBuilder;
        JobRunProto: scheduler.JobRunProtoBuilder;
        JobStateProto: scheduler.JobStateProtoBuilder;
        ScheduledRpcJobProto: scheduler.ScheduledRpcJobProtoBuilder;
        ScheduledHttpJobProto: scheduler.ScheduledHttpJobProtoBuilder;
        ScheduledBashJobProto: scheduler.ScheduledBashJobProtoBuilder;
        JobHandler: scheduler.JobHandlerBuilder;
        ScheduledJobProto: scheduler.ScheduledJobProtoBuilder;

    }
}

declare module Proto2TypeScript.scheduler {

    export interface CronSchedule extends ProtoBufModel {
        second?: string;
        getSecond() : string;
        setSecond(second : string): void;
        minute?: string;
        getMinute() : string;
        setMinute(minute : string): void;
        hour?: string;
        getHour() : string;
        setHour(hour : string): void;
        day_of_month?: string;
        getDayOfMonth() : string;
        setDayOfMonth(dayOfMonth : string): void;
        month?: string;
        getMonth() : string;
        setMonth(month : string): void;
        day_of_week?: string;
        getDayOfWeek() : string;
        setDayOfWeek(dayOfWeek : string): void;

    }

    export interface CronScheduleBuilder {
        new(): CronSchedule;
        decode(buffer: ArrayBuffer) : CronSchedule;
        //decode(buffer: NodeBuffer) : CronSchedule;
        //decode(buffer: ByteArrayBuffer) : CronSchedule;
        decode64(buffer: string) : CronSchedule;

    }
}

declare module Proto2TypeScript.scheduler {

    export interface OneTimeSchedule extends ProtoBufModel {
        offset?: number;
        getOffset() : number;
        setOffset(offset : number): void;

    }

    export interface OneTimeScheduleBuilder {
        new(): OneTimeSchedule;
        decode(buffer: ArrayBuffer) : OneTimeSchedule;
        //decode(buffer: NodeBuffer) : OneTimeSchedule;
        //decode(buffer: ByteArrayBuffer) : OneTimeSchedule;
        decode64(buffer: string) : OneTimeSchedule;

    }
}

declare module Proto2TypeScript.scheduler {

    export interface PeriodicSchedule extends ProtoBufModel {
        type?: PeriodicSchedule.Type;
        getType() : PeriodicSchedule.Type;
        setType(type : PeriodicSchedule.Type): void;
        cron_schedule?: CronSchedule;
        getCronSchedule() : CronSchedule;
        setCronSchedule(cronSchedule : CronSchedule): void;
        start_time?: number;
        getStartTime() : number;
        setStartTime(startTime : number): void;
        end_time?: number;
        getEndTime() : number;
        setEndTime(endTime : number): void;

    }

    export interface PeriodicScheduleBuilder {
        new(): PeriodicSchedule;
        decode(buffer: ArrayBuffer) : PeriodicSchedule;
        //decode(buffer: NodeBuffer) : PeriodicSchedule;
        //decode(buffer: ByteArrayBuffer) : PeriodicSchedule;
        decode64(buffer: string) : PeriodicSchedule;
        Type: PeriodicSchedule.Type;

    }
}

declare module Proto2TypeScript.scheduler.PeriodicSchedule {
    export const enum Type {
        DEFAULT = 0,
        CRON = 1,

    }
}

declare module Proto2TypeScript.scheduler {

    export interface TimeSchedule extends ProtoBufModel {
        periodicity?: TimeSchedule.Periodicity;
        getPeriodicity() : TimeSchedule.Periodicity;
        setPeriodicity(periodicity : TimeSchedule.Periodicity): void;
        one_time_schedule?: OneTimeSchedule;
        getOneTimeSchedule() : OneTimeSchedule;
        setOneTimeSchedule(oneTimeSchedule : OneTimeSchedule): void;
        periodic_schedule?: PeriodicSchedule;
        getPeriodicSchedule() : PeriodicSchedule;
        setPeriodicSchedule(periodicSchedule : PeriodicSchedule): void;

    }

    export interface TimeScheduleBuilder {
        new(): TimeSchedule;
        decode(buffer: ArrayBuffer) : TimeSchedule;
        //decode(buffer: NodeBuffer) : TimeSchedule;
        //decode(buffer: ByteArrayBuffer) : TimeSchedule;
        decode64(buffer: string) : TimeSchedule;
        Periodicity: TimeSchedule.Periodicity;

    }
}

declare module Proto2TypeScript.scheduler.TimeSchedule {
    export const enum Periodicity {
        DEFAULT = 0,
        ONE_TIME = 1,
        PERIODIC = 2,

    }
}

declare module Proto2TypeScript.scheduler {

    export interface NodeSchedule extends ProtoBufModel {
        schedule?: NodeSchedule.Type;
        getSchedule() : NodeSchedule.Type;
        setSchedule(schedule : NodeSchedule.Type): void;

    }

    export interface NodeScheduleBuilder {
        new(): NodeSchedule;
        decode(buffer: ArrayBuffer) : NodeSchedule;
        //decode(buffer: NodeBuffer) : NodeSchedule;
        //decode(buffer: ByteArrayBuffer) : NodeSchedule;
        decode64(buffer: string) : NodeSchedule;
        Type: NodeSchedule.Type;

    }
}

declare module Proto2TypeScript.scheduler.NodeSchedule {
    export const enum Type {
        DEFAULT = 0,
        SIZE = 1,
        HOST_LIST = 2,
        ALL_HOSTS = 3,

    }
}

declare module Proto2TypeScript.scheduler {

    export interface ConstantBackoff extends ProtoBufModel {
        time?: number;
        getTime() : number;
        setTime(time : number): void;

    }

    export interface ConstantBackoffBuilder {
        new(): ConstantBackoff;
        decode(buffer: ArrayBuffer) : ConstantBackoff;
        //decode(buffer: NodeBuffer) : ConstantBackoff;
        //decode(buffer: ByteArrayBuffer) : ConstantBackoff;
        decode64(buffer: string) : ConstantBackoff;

    }
}

declare module Proto2TypeScript.scheduler {

    export interface ExponentialBackoff extends ProtoBufModel {
        offset?: number;
        getOffset() : number;
        setOffset(offset : number): void;
        base?: number;
        getBase() : number;
        setBase(base : number): void;
        max?: number;
        getMax() : number;
        setMax(max : number): void;

    }

    export interface ExponentialBackoffBuilder {
        new(): ExponentialBackoff;
        decode(buffer: ArrayBuffer) : ExponentialBackoff;
        //decode(buffer: NodeBuffer) : ExponentialBackoff;
        //decode(buffer: ByteArrayBuffer) : ExponentialBackoff;
        decode64(buffer: string) : ExponentialBackoff;

    }
}

declare module Proto2TypeScript.scheduler {

    export interface BackoffPolicy extends ProtoBufModel {
        type?: BackoffPolicy.Type;
        getType() : BackoffPolicy.Type;
        setType(type : BackoffPolicy.Type): void;
        constant_backoff?: ConstantBackoff;
        getConstantBackoff() : ConstantBackoff;
        setConstantBackoff(constantBackoff : ConstantBackoff): void;
        exponential_backoff?: ExponentialBackoff;
        getExponentialBackoff() : ExponentialBackoff;
        setExponentialBackoff(exponentialBackoff : ExponentialBackoff): void;

    }

    export interface BackoffPolicyBuilder {
        new(): BackoffPolicy;
        decode(buffer: ArrayBuffer) : BackoffPolicy;
        //decode(buffer: NodeBuffer) : BackoffPolicy;
        //decode(buffer: ByteArrayBuffer) : BackoffPolicy;
        decode64(buffer: string) : BackoffPolicy;
        Type: BackoffPolicy.Type;

    }
}

declare module Proto2TypeScript.scheduler.BackoffPolicy {
    export const enum Type {
        CONSTANT = 0,
        EXPONENTIAL = 1,

    }
}

declare module Proto2TypeScript.scheduler {

    export interface NumRetriesLimit extends ProtoBufModel {
        num_retries?: number;
        getNumRetries() : number;
        setNumRetries(numRetries : number): void;

    }

    export interface NumRetriesLimitBuilder {
        new(): NumRetriesLimit;
        decode(buffer: ArrayBuffer) : NumRetriesLimit;
        //decode(buffer: NodeBuffer) : NumRetriesLimit;
        //decode(buffer: ByteArrayBuffer) : NumRetriesLimit;
        decode64(buffer: string) : NumRetriesLimit;

    }
}

declare module Proto2TypeScript.scheduler {

    export interface TimeDeadlineLimit extends ProtoBufModel {
        time_deadline?: number;
        getTimeDeadline() : number;
        setTimeDeadline(timeDeadline : number): void;

    }

    export interface TimeDeadlineLimitBuilder {
        new(): TimeDeadlineLimit;
        decode(buffer: ArrayBuffer) : TimeDeadlineLimit;
        //decode(buffer: NodeBuffer) : TimeDeadlineLimit;
        //decode(buffer: ByteArrayBuffer) : TimeDeadlineLimit;
        decode64(buffer: string) : TimeDeadlineLimit;

    }
}

declare module Proto2TypeScript.scheduler {

    export interface TerminationPolicy extends ProtoBufModel {
        type?: TerminationPolicy.Type;
        getType() : TerminationPolicy.Type;
        setType(type : TerminationPolicy.Type): void;
        num_retries_limit?: NumRetriesLimit;
        getNumRetriesLimit() : NumRetriesLimit;
        setNumRetriesLimit(numRetriesLimit : NumRetriesLimit): void;
        time_deadline_limit?: TimeDeadlineLimit;
        getTimeDeadlineLimit() : TimeDeadlineLimit;
        setTimeDeadlineLimit(timeDeadlineLimit : TimeDeadlineLimit): void;

    }

    export interface TerminationPolicyBuilder {
        new(): TerminationPolicy;
        decode(buffer: ArrayBuffer) : TerminationPolicy;
        //decode(buffer: NodeBuffer) : TerminationPolicy;
        //decode(buffer: ByteArrayBuffer) : TerminationPolicy;
        decode64(buffer: string) : TerminationPolicy;
        Type: TerminationPolicy.Type;

    }
}

declare module Proto2TypeScript.scheduler.TerminationPolicy {
    export const enum Type {
        NUM_RETRIES = 0,
        TIME_DEADLINE = 1,
        TILL_SUCCESS = 2,

    }
}

declare module Proto2TypeScript.scheduler {

    export interface RetryPolicy extends ProtoBufModel {
        backoff_policy?: BackoffPolicy;
        getBackoffPolicy() : BackoffPolicy;
        setBackoffPolicy(backoffPolicy : BackoffPolicy): void;
        termination_policy?: TerminationPolicy;
        getTerminationPolicy() : TerminationPolicy;
        setTerminationPolicy(terminationPolicy : TerminationPolicy): void;

    }

    export interface RetryPolicyBuilder {
        new(): RetryPolicy;
        decode(buffer: ArrayBuffer) : RetryPolicy;
        //decode(buffer: NodeBuffer) : RetryPolicy;
        //decode(buffer: ByteArrayBuffer) : RetryPolicy;
        decode64(buffer: string) : RetryPolicy;

    }
}

declare module Proto2TypeScript.scheduler {

    export interface JobRunStateProto extends ProtoBufModel {
        state?: JobRunStateProto.State;
        getState() : JobRunStateProto.State;
        setState(state : JobRunStateProto.State): void;

    }

    export interface JobRunStateProtoBuilder {
        new(): JobRunStateProto;
        decode(buffer: ArrayBuffer) : JobRunStateProto;
        //decode(buffer: NodeBuffer) : JobRunStateProto;
        //decode(buffer: ByteArrayBuffer) : JobRunStateProto;
        decode64(buffer: string) : JobRunStateProto;
        State: JobRunStateProto.State;

    }
}

declare module Proto2TypeScript.scheduler.JobRunStateProto {
    export const enum State {
        DEFAULT = 0,
        RUNNING = 1,
        FAILED = 2,
        SUCCESS = 3,
        DEADLINE = 4,
        DOES_NOT_EXIST = 5,

    }
}

declare module Proto2TypeScript.scheduler {

    export interface JobExitStatusProto extends ProtoBufModel {
        state?: JobRunStateProto;
        getState() : JobRunStateProto;
        setState(state : JobRunStateProto): void;
        message_code?: common.MessageCode;
        getMessageCode() : common.MessageCode;
        setMessageCode(messageCode : common.MessageCode): void;
        detail?: string;
        getDetail() : string;
        setDetail(detail : string): void;

    }

    export interface JobExitStatusProtoBuilder {
        new(): JobExitStatusProto;
        decode(buffer: ArrayBuffer) : JobExitStatusProto;
        //decode(buffer: NodeBuffer) : JobExitStatusProto;
        //decode(buffer: ByteArrayBuffer) : JobExitStatusProto;
        decode64(buffer: string) : JobExitStatusProto;

    }
}

declare module Proto2TypeScript.scheduler {

    export interface JobRunProto extends ProtoBufModel {
        run_id?: string;
        getRunId() : string;
        setRunId(runId : string): void;
        job_id?: string;
        getJobId() : string;
        setJobId(jobId : string): void;
        start_time?: number;
        getStartTime() : number;
        setStartTime(startTime : number): void;
        end_time?: number;
        getEndTime() : number;
        setEndTime(endTime : number): void;
        progress?: util.ProgressReportProto;
        getProgress() : util.ProgressReportProto;
        setProgress(progress : util.ProgressReportProto): void;
        exit_status?: JobExitStatusProto;
        getExitStatus() : JobExitStatusProto;
        setExitStatus(exitStatus : JobExitStatusProto): void;
        run_state?: JobRunStateProto;
        getRunState() : JobRunStateProto;
        setRunState(runState : JobRunStateProto): void;
        key_value_pairs: common.KeyValueStr[];
        getKeyValuePairs() : common.KeyValueStr[];
        setKeyValuePairs(keyValuePairs : common.KeyValueStr[]): void;

    }

    export interface JobRunProtoBuilder {
        new(): JobRunProto;
        decode(buffer: ArrayBuffer) : JobRunProto;
        //decode(buffer: NodeBuffer) : JobRunProto;
        //decode(buffer: ByteArrayBuffer) : JobRunProto;
        decode64(buffer: string) : JobRunProto;

    }
}

declare module Proto2TypeScript.scheduler {

    export interface JobStateProto extends ProtoBufModel {
        state?: JobStateProto.State;
        getState() : JobStateProto.State;
        setState(state : JobStateProto.State): void;

    }

    export interface JobStateProtoBuilder {
        new(): JobStateProto;
        decode(buffer: ArrayBuffer) : JobStateProto;
        //decode(buffer: NodeBuffer) : JobStateProto;
        //decode(buffer: ByteArrayBuffer) : JobStateProto;
        decode64(buffer: string) : JobStateProto;
        State: JobStateProto.State;

    }
}

declare module Proto2TypeScript.scheduler.JobStateProto {
    export const enum State {
        DEFAULT = 0,
        SCHEDULED = 1,
        PAUSED = 2,
        STOPPED = 3,
        CLEANUP = 4,
        EXPIRED = 5,

    }
}

declare module Proto2TypeScript.scheduler {

    export interface ScheduledRpcJobProto extends ProtoBufModel {
        easy_address?: string;
        getEasyAddress() : string;
        setEasyAddress(easyAddress : string): void;
        key_value_pairs: common.KeyValueStr[];
        getKeyValuePairs() : common.KeyValueStr[];
        setKeyValuePairs(keyValuePairs : common.KeyValueStr[]): void;

    }

    export interface ScheduledRpcJobProtoBuilder {
        new(): ScheduledRpcJobProto;
        decode(buffer: ArrayBuffer) : ScheduledRpcJobProto;
        //decode(buffer: NodeBuffer) : ScheduledRpcJobProto;
        //decode(buffer: ByteArrayBuffer) : ScheduledRpcJobProto;
        decode64(buffer: string) : ScheduledRpcJobProto;

    }
}

declare module Proto2TypeScript.scheduler {

    export interface ScheduledHttpJobProto extends ProtoBufModel {
        http_url?: string;
        getHttpUrl() : string;
        setHttpUrl(httpUrl : string): void;
        easy_address?: string;
        getEasyAddress() : string;
        setEasyAddress(easyAddress : string): void;
        path?: string;
        getPath() : string;
        setPath(path : string): void;
        key_value_pairs: common.KeyValueStr[];
        getKeyValuePairs() : common.KeyValueStr[];
        setKeyValuePairs(keyValuePairs : common.KeyValueStr[]): void;

    }

    export interface ScheduledHttpJobProtoBuilder {
        new(): ScheduledHttpJobProto;
        decode(buffer: ArrayBuffer) : ScheduledHttpJobProto;
        //decode(buffer: NodeBuffer) : ScheduledHttpJobProto;
        //decode(buffer: ByteArrayBuffer) : ScheduledHttpJobProto;
        decode64(buffer: string) : ScheduledHttpJobProto;

    }
}

declare module Proto2TypeScript.scheduler {

    export interface ScheduledBashJobProto extends ProtoBufModel {
        command?: string;
        getCommand() : string;
        setCommand(command : string): void;

    }

    export interface ScheduledBashJobProtoBuilder {
        new(): ScheduledBashJobProto;
        decode(buffer: ArrayBuffer) : ScheduledBashJobProto;
        //decode(buffer: NodeBuffer) : ScheduledBashJobProto;
        //decode(buffer: ByteArrayBuffer) : ScheduledBashJobProto;
        decode64(buffer: string) : ScheduledBashJobProto;

    }
}

declare module Proto2TypeScript.scheduler {

    export interface JobHandler extends ProtoBufModel {
        handler?: JobHandler.Handler;
        getHandler() : JobHandler.Handler;
        setHandler(handler : JobHandler.Handler): void;

    }

    export interface JobHandlerBuilder {
        new(): JobHandler;
        decode(buffer: ArrayBuffer) : JobHandler;
        //decode(buffer: NodeBuffer) : JobHandler;
        //decode(buffer: ByteArrayBuffer) : JobHandler;
        decode64(buffer: string) : JobHandler;
        Handler: JobHandler.Handler;

    }
}

declare module Proto2TypeScript.scheduler.JobHandler {
    export const enum Handler {
        NONE = 0,
        TEST1 = 3,
        TEST2 = 4,
        DEFAULT = 5,
        SCHEDULED_REPORT = 1,
        DATACONNECT = 2,
        A3_GC = 6,
        A3_Analysis = 7,

    }
}

declare module Proto2TypeScript.scheduler {

    export interface ScheduledJobProto extends ProtoBufModel {
        schedule?: TimeSchedule;
        getSchedule() : TimeSchedule;
        setSchedule(schedule : TimeSchedule): void;
        node_schedule?: NodeSchedule;
        getNodeSchedule() : NodeSchedule;
        setNodeSchedule(nodeSchedule : NodeSchedule): void;
        id?: string;
        getId() : string;
        setId(id : string): void;
        name?: string;
        getName() : string;
        setName(name : string): void;
        description?: string;
        getDescription() : string;
        setDescription(description : string): void;
        tags: string[];
        getTags() : string[];
        setTags(tags : string[]): void;
        creation_time?: number;
        getCreationTime() : number;
        setCreationTime(creationTime : number): void;
        last_modification_time?: number;
        getLastModificationTime() : number;
        setLastModificationTime(lastModificationTime : number): void;
        creation_author?: string;
        getCreationAuthor() : string;
        setCreationAuthor(creationAuthor : string): void;
        last_modification_author?: string;
        getLastModificationAuthor() : string;
        setLastModificationAuthor(lastModificationAuthor : string): void;
        current_state?: JobStateProto;
        getCurrentState() : JobStateProto;
        setCurrentState(currentState : JobStateProto): void;
        executor_retry_policy?: RetryPolicy;
        getExecutorRetryPolicy() : RetryPolicy;
        setExecutorRetryPolicy(executorRetryPolicy : RetryPolicy): void;
        scheduler_retry_policy?: RetryPolicy;
        getSchedulerRetryPolicy() : RetryPolicy;
        setSchedulerRetryPolicy(schedulerRetryPolicy : RetryPolicy): void;
        job_run_deadline?: number;
        getJobRunDeadline() : number;
        setJobRunDeadline(jobRunDeadline : number): void;
        job_run_status_poll_interval?: number;
        getJobRunStatusPollInterval() : number;
        setJobRunStatusPollInterval(jobRunStatusPollInterval : number): void;
        type?: ScheduledJobProto.Type;
        getType() : ScheduledJobProto.Type;
        setType(type : ScheduledJobProto.Type): void;
        bash_job?: ScheduledBashJobProto;
        getBashJob() : ScheduledBashJobProto;
        setBashJob(bashJob : ScheduledBashJobProto): void;
        http_job?: ScheduledHttpJobProto;
        getHttpJob() : ScheduledHttpJobProto;
        setHttpJob(httpJob : ScheduledHttpJobProto): void;
        rpc_job?: ScheduledRpcJobProto;
        getRpcJob() : ScheduledRpcJobProto;
        setRpcJob(rpcJob : ScheduledRpcJobProto): void;
        job_handler?: JobHandler;
        getJobHandler() : JobHandler;
        setJobHandler(jobHandler : JobHandler): void;

    }

    export interface ScheduledJobProtoBuilder {
        new(): ScheduledJobProto;
        decode(buffer: ArrayBuffer) : ScheduledJobProto;
        //decode(buffer: NodeBuffer) : ScheduledJobProto;
        //decode(buffer: ByteArrayBuffer) : ScheduledJobProto;
        decode64(buffer: string) : ScheduledJobProto;
        Type: ScheduledJobProto.Type;

    }
}

declare module Proto2TypeScript.scheduler.ScheduledJobProto {
    export const enum Type {
        DEFAULT = 0,
        BASH = 1,
        HTTP = 2,
        RPC = 3,

    }
}

declare module Proto2TypeScript {

    export interface util extends ProtoBufModel {

    }

    export interface utilBuilder {
        new(): util;
        decode(buffer: ArrayBuffer) : util;
        //decode(buffer: NodeBuffer) : util;
        //decode(buffer: ByteArrayBuffer) : util;
        decode64(buffer: string) : util;
        ProgressReportProto: util.ProgressReportProtoBuilder;

    }
}

declare module Proto2TypeScript.util {

    export interface ProgressReportProto extends ProtoBufModel {
        name?: string;
        getName() : string;
        setName(name : string): void;
        step: ProgressReportProto.Step[];
        getStep() : ProgressReportProto.Step[];
        setStep(step : ProgressReportProto.Step[]): void;
        current_step?: number;
        getCurrentStep() : number;
        setCurrentStep(currentStep : number): void;
        description?: string;
        getDescription() : string;
        setDescription(description : string): void;

    }

    export interface ProgressReportProtoBuilder {
        new(): ProgressReportProto;
        decode(buffer: ArrayBuffer) : ProgressReportProto;
        //decode(buffer: NodeBuffer) : ProgressReportProto;
        //decode(buffer: ByteArrayBuffer) : ProgressReportProto;
        decode64(buffer: string) : ProgressReportProto;
        Step: ProgressReportProto.StepBuilder;

    }
}

declare module Proto2TypeScript.util.ProgressReportProto {

    export interface Step extends ProtoBufModel {
        step_num?: number;
        getStepNum() : number;
        setStepNum(stepNum : number): void;
        name?: string;
        getName() : string;
        setName(name : string): void;
        start_time?: number;
        getStartTime() : number;
        setStartTime(startTime : number): void;
        current_progress?: number;
        getCurrentProgress() : number;
        setCurrentProgress(currentProgress : number): void;
        total_work?: number;
        getTotalWork() : number;
        setTotalWork(totalWork : number): void;
        unit?: string;
        getUnit() : string;
        setUnit(unit : string): void;
        description?: string;
        getDescription() : string;
        setDescription(description : string): void;

    }

    export interface StepBuilder {
        new(): Step;
        decode(buffer: ArrayBuffer) : Step;
        //decode(buffer: NodeBuffer) : Step;
        //decode(buffer: ByteArrayBuffer) : Step;
        decode64(buffer: string) : Step;

    }
}
