//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

thrift.Sage.AutoComplete.AutoCompleteV2_Batch_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_Batch_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_Batch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_Batch_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_Batch_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_Batch_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_Batch_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_Batch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_Batch_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_Batch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_ValidateContext_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_ValidateContext_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_ValidateContext_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_ValidateContext_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_ValidateContext_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_ValidateContext_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_ValidateContext_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_ValidateContext_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_ValidateContext_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_ValidateContext_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_CleanupContext_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_CleanupContext_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_CleanupContext_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_CleanupContext_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_CleanupContext_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_CleanupContext_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_CleanupContext_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_CleanupContext_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_CleanupContext_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_CleanupContext_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_RefreshGuids_args = function(args) {
  this.Request = null;
  if (args) {
    if (args.Request !== undefined) {
      this.Request = args.Request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_RefreshGuids_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_RefreshGuids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.Request = new thrift.common.ThriftRequest();
        this.Request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_RefreshGuids_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_RefreshGuids_args');
  if (this.Request !== null && this.Request !== undefined) {
    output.writeFieldBegin('Request', Thrift.Type.STRUCT, 1);
    this.Request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_RefreshGuids_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_RefreshGuids_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_RefreshGuids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_RefreshGuids_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_RefreshGuids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_AddTable_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_AddTable_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_AddTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_AddTable_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_AddTable_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_AddTable_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_AddTable_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_AddTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_AddTable_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_AddTable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_EditTable_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_EditTable_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_EditTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_EditTable_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_EditTable_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_EditTable_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_EditTable_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_EditTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_EditTable_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_EditTable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_DeleteTable_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_DeleteTable_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_DeleteTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_DeleteTable_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_DeleteTable_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_DeleteTable_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_DeleteTable_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_DeleteTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_DeleteTable_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_DeleteTable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_TransformTable_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_TransformTable_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_TransformTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_TransformTable_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_TransformTable_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_TransformTable_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_TransformTable_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_TransformTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_TransformTable_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_TransformTable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_UpdateWorksheet_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_UpdateWorksheet_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_UpdateWorksheet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_UpdateWorksheet_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_UpdateWorksheet_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_UpdateWorksheet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_UpdateWorksheet_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_UpdateWorksheet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_UpdateWorksheet_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_UpdateWorksheet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_TransformWorksheet_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_TransformWorksheet_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_TransformWorksheet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_TransformWorksheet_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_TransformWorksheet_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_TransformWorksheet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_TransformWorksheet_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_TransformWorksheet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_TransformWorksheet_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_TransformWorksheet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_UpdateFormula_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_UpdateFormula_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_UpdateFormula_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_UpdateFormula_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_UpdateFormula_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_UpdateFormula_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_UpdateFormula_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_UpdateFormula_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_UpdateFormula_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_UpdateFormula_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_SaveFormula_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_SaveFormula_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_SaveFormula_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_SaveFormula_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_SaveFormula_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_SaveFormula_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_SaveFormula_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_SaveFormula_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_SaveFormula_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_SaveFormula_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_RemoveFormula_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_RemoveFormula_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_RemoveFormula_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_RemoveFormula_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_RemoveFormula_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_RemoveFormula_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_RemoveFormula_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_RemoveFormula_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_RemoveFormula_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_RemoveFormula_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_AddJoin_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_AddJoin_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_AddJoin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_AddJoin_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_AddJoin_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_AddJoin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_AddJoin_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_AddJoin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_AddJoin_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_AddJoin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_EditJoin_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_EditJoin_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_EditJoin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_EditJoin_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_EditJoin_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_EditJoin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_EditJoin_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_EditJoin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_EditJoin_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_EditJoin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_DeleteJoin_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_DeleteJoin_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_DeleteJoin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_DeleteJoin_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_DeleteJoin_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_DeleteJoin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_DeleteJoin_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_DeleteJoin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_DeleteJoin_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_DeleteJoin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_AddTableFilter_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_AddTableFilter_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_AddTableFilter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_AddTableFilter_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_AddTableFilter_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_AddTableFilter_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_AddTableFilter_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_AddTableFilter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_AddTableFilter_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_AddTableFilter_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_UpdateTableFilter_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_UpdateTableFilter_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_UpdateTableFilter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_UpdateTableFilter_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_UpdateTableFilter_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_UpdateTableFilter_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_UpdateTableFilter_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_UpdateTableFilter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_UpdateTableFilter_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_UpdateTableFilter_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_GetDataScope_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_GetDataScope_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_GetDataScope_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_GetDataScope_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_GetDataScope_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_GetDataScope_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_GetDataScope_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_GetDataScope_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_GetDataScope_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_GetDataScope_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_GetAccessibleTables_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_GetAccessibleTables_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_GetAccessibleTables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_GetAccessibleTables_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_GetAccessibleTables_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_GetAccessibleTables_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_GetAccessibleTables_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_GetAccessibleTables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_GetAccessibleTables_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_GetAccessibleTables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_Ping_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_Ping_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_Ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_Ping_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_Ping_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_Ping_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_Ping_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_Ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_Ping_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_Ping_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_GetJoinColumns_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_GetJoinColumns_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_GetJoinColumns_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_GetJoinColumns_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_GetJoinColumns_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_GetJoinColumns_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_GetJoinColumns_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_GetJoinColumns_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_GetJoinColumns_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_GetJoinColumns_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_GetJoinTables_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_GetJoinTables_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_GetJoinTables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_GetJoinTables_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_GetJoinTables_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_GetJoinTables_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_GetJoinTables_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_GetJoinTables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_GetJoinTables_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_GetJoinTables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_UpgradeContext_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_UpgradeContext_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_UpgradeContext_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_UpgradeContext_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_UpgradeContext_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_UpgradeContext_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_UpgradeContext_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_UpgradeContext_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_UpgradeContext_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_UpgradeContext_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_GetMetadataStatus_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_GetMetadataStatus_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_GetMetadataStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_GetMetadataStatus_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_GetMetadataStatus_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_GetMetadataStatus_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_GetMetadataStatus_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_GetMetadataStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_GetMetadataStatus_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_GetMetadataStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_Complete_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_Complete_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_Complete_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_Complete_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_Complete_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_Complete_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_Complete_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_Complete_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_Complete_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_Complete_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3VisualizationAnlysis_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_A3VisualizationAnlysis_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_A3VisualizationAnlysis_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3VisualizationAnlysis_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_A3VisualizationAnlysis_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3VisualizationAnlysis_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_A3VisualizationAnlysis_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_A3VisualizationAnlysis_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3VisualizationAnlysis_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_A3VisualizationAnlysis_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3DataAnalysis_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_A3DataAnalysis_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_A3DataAnalysis_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3DataAnalysis_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_A3DataAnalysis_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3DataAnalysis_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_A3DataAnalysis_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_A3DataAnalysis_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3DataAnalysis_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_A3DataAnalysis_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3TableAnalysis_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_A3TableAnalysis_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_A3TableAnalysis_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3TableAnalysis_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_A3TableAnalysis_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3TableAnalysis_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_A3TableAnalysis_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_A3TableAnalysis_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3TableAnalysis_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_A3TableAnalysis_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3Analysis_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_A3Analysis_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_A3Analysis_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3Analysis_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_A3Analysis_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3Analysis_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_A3Analysis_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_A3Analysis_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3Analysis_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_A3Analysis_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3AnalysisStatus_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_A3AnalysisStatus_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_A3AnalysisStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3AnalysisStatus_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_A3AnalysisStatus_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3AnalysisStatus_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_A3AnalysisStatus_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_A3AnalysisStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3AnalysisStatus_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_A3AnalysisStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3AnalysisCancel_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_A3AnalysisCancel_args.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_A3AnalysisCancel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new thrift.common.ThriftRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3AnalysisCancel_args.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_A3AnalysisCancel_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3AnalysisCancel_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
thrift.Sage.AutoComplete.AutoCompleteV2_A3AnalysisCancel_result.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2_A3AnalysisCancel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new thrift.common.ThriftResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2_A3AnalysisCancel_result.prototype.write = function(output) {
  output.writeStructBegin('AutoCompleteV2_A3AnalysisCancel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Sage.AutoComplete.AutoCompleteV2Client = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype = {};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.Batch = function(request, callback) {
  if (callback === undefined) {
    this.send_Batch(request);
    return this.recv_Batch();
  } else {
    var postData = this.send_Batch(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_Batch);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_Batch = function(request, callback) {
  this.output.writeMessageBegin('Batch', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_Batch_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_Batch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_Batch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'Batch failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.ValidateContext = function(request, callback) {
  if (callback === undefined) {
    this.send_ValidateContext(request);
    return this.recv_ValidateContext();
  } else {
    var postData = this.send_ValidateContext(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_ValidateContext);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_ValidateContext = function(request, callback) {
  this.output.writeMessageBegin('ValidateContext', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_ValidateContext_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_ValidateContext = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_ValidateContext_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'ValidateContext failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.CleanupContext = function(request, callback) {
  if (callback === undefined) {
    this.send_CleanupContext(request);
    return this.recv_CleanupContext();
  } else {
    var postData = this.send_CleanupContext(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_CleanupContext);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_CleanupContext = function(request, callback) {
  this.output.writeMessageBegin('CleanupContext', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_CleanupContext_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_CleanupContext = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_CleanupContext_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'CleanupContext failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.RefreshGuids = function(Request, callback) {
  if (callback === undefined) {
    this.send_RefreshGuids(Request);
    return this.recv_RefreshGuids();
  } else {
    var postData = this.send_RefreshGuids(Request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_RefreshGuids);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_RefreshGuids = function(Request, callback) {
  this.output.writeMessageBegin('RefreshGuids', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_RefreshGuids_args();
  args.Request = Request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_RefreshGuids = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_RefreshGuids_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'RefreshGuids failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.AddTable = function(request, callback) {
  if (callback === undefined) {
    this.send_AddTable(request);
    return this.recv_AddTable();
  } else {
    var postData = this.send_AddTable(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_AddTable);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_AddTable = function(request, callback) {
  this.output.writeMessageBegin('AddTable', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_AddTable_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_AddTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_AddTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'AddTable failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.EditTable = function(request, callback) {
  if (callback === undefined) {
    this.send_EditTable(request);
    return this.recv_EditTable();
  } else {
    var postData = this.send_EditTable(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_EditTable);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_EditTable = function(request, callback) {
  this.output.writeMessageBegin('EditTable', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_EditTable_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_EditTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_EditTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'EditTable failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.DeleteTable = function(request, callback) {
  if (callback === undefined) {
    this.send_DeleteTable(request);
    return this.recv_DeleteTable();
  } else {
    var postData = this.send_DeleteTable(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_DeleteTable);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_DeleteTable = function(request, callback) {
  this.output.writeMessageBegin('DeleteTable', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_DeleteTable_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_DeleteTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_DeleteTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'DeleteTable failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.TransformTable = function(request, callback) {
  if (callback === undefined) {
    this.send_TransformTable(request);
    return this.recv_TransformTable();
  } else {
    var postData = this.send_TransformTable(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_TransformTable);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_TransformTable = function(request, callback) {
  this.output.writeMessageBegin('TransformTable', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_TransformTable_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_TransformTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_TransformTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'TransformTable failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.UpdateWorksheet = function(request, callback) {
  if (callback === undefined) {
    this.send_UpdateWorksheet(request);
    return this.recv_UpdateWorksheet();
  } else {
    var postData = this.send_UpdateWorksheet(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_UpdateWorksheet);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_UpdateWorksheet = function(request, callback) {
  this.output.writeMessageBegin('UpdateWorksheet', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_UpdateWorksheet_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_UpdateWorksheet = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_UpdateWorksheet_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'UpdateWorksheet failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.TransformWorksheet = function(request, callback) {
  if (callback === undefined) {
    this.send_TransformWorksheet(request);
    return this.recv_TransformWorksheet();
  } else {
    var postData = this.send_TransformWorksheet(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_TransformWorksheet);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_TransformWorksheet = function(request, callback) {
  this.output.writeMessageBegin('TransformWorksheet', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_TransformWorksheet_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_TransformWorksheet = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_TransformWorksheet_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'TransformWorksheet failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.UpdateFormula = function(request, callback) {
  if (callback === undefined) {
    this.send_UpdateFormula(request);
    return this.recv_UpdateFormula();
  } else {
    var postData = this.send_UpdateFormula(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_UpdateFormula);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_UpdateFormula = function(request, callback) {
  this.output.writeMessageBegin('UpdateFormula', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_UpdateFormula_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_UpdateFormula = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_UpdateFormula_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'UpdateFormula failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.SaveFormula = function(request, callback) {
  if (callback === undefined) {
    this.send_SaveFormula(request);
    return this.recv_SaveFormula();
  } else {
    var postData = this.send_SaveFormula(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_SaveFormula);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_SaveFormula = function(request, callback) {
  this.output.writeMessageBegin('SaveFormula', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_SaveFormula_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_SaveFormula = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_SaveFormula_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SaveFormula failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.RemoveFormula = function(request, callback) {
  if (callback === undefined) {
    this.send_RemoveFormula(request);
    return this.recv_RemoveFormula();
  } else {
    var postData = this.send_RemoveFormula(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_RemoveFormula);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_RemoveFormula = function(request, callback) {
  this.output.writeMessageBegin('RemoveFormula', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_RemoveFormula_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_RemoveFormula = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_RemoveFormula_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'RemoveFormula failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.AddJoin = function(request, callback) {
  if (callback === undefined) {
    this.send_AddJoin(request);
    return this.recv_AddJoin();
  } else {
    var postData = this.send_AddJoin(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_AddJoin);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_AddJoin = function(request, callback) {
  this.output.writeMessageBegin('AddJoin', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_AddJoin_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_AddJoin = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_AddJoin_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'AddJoin failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.EditJoin = function(request, callback) {
  if (callback === undefined) {
    this.send_EditJoin(request);
    return this.recv_EditJoin();
  } else {
    var postData = this.send_EditJoin(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_EditJoin);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_EditJoin = function(request, callback) {
  this.output.writeMessageBegin('EditJoin', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_EditJoin_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_EditJoin = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_EditJoin_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'EditJoin failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.DeleteJoin = function(request, callback) {
  if (callback === undefined) {
    this.send_DeleteJoin(request);
    return this.recv_DeleteJoin();
  } else {
    var postData = this.send_DeleteJoin(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_DeleteJoin);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_DeleteJoin = function(request, callback) {
  this.output.writeMessageBegin('DeleteJoin', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_DeleteJoin_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_DeleteJoin = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_DeleteJoin_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'DeleteJoin failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.AddTableFilter = function(request, callback) {
  if (callback === undefined) {
    this.send_AddTableFilter(request);
    return this.recv_AddTableFilter();
  } else {
    var postData = this.send_AddTableFilter(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_AddTableFilter);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_AddTableFilter = function(request, callback) {
  this.output.writeMessageBegin('AddTableFilter', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_AddTableFilter_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_AddTableFilter = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_AddTableFilter_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'AddTableFilter failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.UpdateTableFilter = function(request, callback) {
  if (callback === undefined) {
    this.send_UpdateTableFilter(request);
    return this.recv_UpdateTableFilter();
  } else {
    var postData = this.send_UpdateTableFilter(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_UpdateTableFilter);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_UpdateTableFilter = function(request, callback) {
  this.output.writeMessageBegin('UpdateTableFilter', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_UpdateTableFilter_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_UpdateTableFilter = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_UpdateTableFilter_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'UpdateTableFilter failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.GetDataScope = function(request, callback) {
  if (callback === undefined) {
    this.send_GetDataScope(request);
    return this.recv_GetDataScope();
  } else {
    var postData = this.send_GetDataScope(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_GetDataScope);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_GetDataScope = function(request, callback) {
  this.output.writeMessageBegin('GetDataScope', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_GetDataScope_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_GetDataScope = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_GetDataScope_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetDataScope failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.GetAccessibleTables = function(request, callback) {
  if (callback === undefined) {
    this.send_GetAccessibleTables(request);
    return this.recv_GetAccessibleTables();
  } else {
    var postData = this.send_GetAccessibleTables(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_GetAccessibleTables);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_GetAccessibleTables = function(request, callback) {
  this.output.writeMessageBegin('GetAccessibleTables', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_GetAccessibleTables_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_GetAccessibleTables = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_GetAccessibleTables_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetAccessibleTables failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.Ping = function(request, callback) {
  if (callback === undefined) {
    this.send_Ping(request);
    return this.recv_Ping();
  } else {
    var postData = this.send_Ping(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_Ping);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_Ping = function(request, callback) {
  this.output.writeMessageBegin('Ping', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_Ping_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_Ping = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_Ping_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'Ping failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.GetJoinColumns = function(request, callback) {
  if (callback === undefined) {
    this.send_GetJoinColumns(request);
    return this.recv_GetJoinColumns();
  } else {
    var postData = this.send_GetJoinColumns(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_GetJoinColumns);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_GetJoinColumns = function(request, callback) {
  this.output.writeMessageBegin('GetJoinColumns', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_GetJoinColumns_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_GetJoinColumns = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_GetJoinColumns_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetJoinColumns failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.GetJoinTables = function(request, callback) {
  if (callback === undefined) {
    this.send_GetJoinTables(request);
    return this.recv_GetJoinTables();
  } else {
    var postData = this.send_GetJoinTables(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_GetJoinTables);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_GetJoinTables = function(request, callback) {
  this.output.writeMessageBegin('GetJoinTables', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_GetJoinTables_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_GetJoinTables = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_GetJoinTables_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetJoinTables failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.UpgradeContext = function(request, callback) {
  if (callback === undefined) {
    this.send_UpgradeContext(request);
    return this.recv_UpgradeContext();
  } else {
    var postData = this.send_UpgradeContext(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_UpgradeContext);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_UpgradeContext = function(request, callback) {
  this.output.writeMessageBegin('UpgradeContext', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_UpgradeContext_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_UpgradeContext = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_UpgradeContext_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'UpgradeContext failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.GetMetadataStatus = function(request, callback) {
  if (callback === undefined) {
    this.send_GetMetadataStatus(request);
    return this.recv_GetMetadataStatus();
  } else {
    var postData = this.send_GetMetadataStatus(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_GetMetadataStatus);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_GetMetadataStatus = function(request, callback) {
  this.output.writeMessageBegin('GetMetadataStatus', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_GetMetadataStatus_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_GetMetadataStatus = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_GetMetadataStatus_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetMetadataStatus failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.Complete = function(request, callback) {
  if (callback === undefined) {
    this.send_Complete(request);
    return this.recv_Complete();
  } else {
    var postData = this.send_Complete(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_Complete);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_Complete = function(request, callback) {
  this.output.writeMessageBegin('Complete', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_Complete_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_Complete = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_Complete_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'Complete failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.A3VisualizationAnlysis = function(request, callback) {
  if (callback === undefined) {
    this.send_A3VisualizationAnlysis(request);
    return this.recv_A3VisualizationAnlysis();
  } else {
    var postData = this.send_A3VisualizationAnlysis(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_A3VisualizationAnlysis);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_A3VisualizationAnlysis = function(request, callback) {
  this.output.writeMessageBegin('A3VisualizationAnlysis', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_A3VisualizationAnlysis_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_A3VisualizationAnlysis = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_A3VisualizationAnlysis_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'A3VisualizationAnlysis failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.A3DataAnalysis = function(request, callback) {
  if (callback === undefined) {
    this.send_A3DataAnalysis(request);
    return this.recv_A3DataAnalysis();
  } else {
    var postData = this.send_A3DataAnalysis(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_A3DataAnalysis);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_A3DataAnalysis = function(request, callback) {
  this.output.writeMessageBegin('A3DataAnalysis', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_A3DataAnalysis_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_A3DataAnalysis = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_A3DataAnalysis_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'A3DataAnalysis failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.A3TableAnalysis = function(request, callback) {
  if (callback === undefined) {
    this.send_A3TableAnalysis(request);
    return this.recv_A3TableAnalysis();
  } else {
    var postData = this.send_A3TableAnalysis(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_A3TableAnalysis);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_A3TableAnalysis = function(request, callback) {
  this.output.writeMessageBegin('A3TableAnalysis', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_A3TableAnalysis_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_A3TableAnalysis = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_A3TableAnalysis_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'A3TableAnalysis failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.A3Analysis = function(request, callback) {
  if (callback === undefined) {
    this.send_A3Analysis(request);
    return this.recv_A3Analysis();
  } else {
    var postData = this.send_A3Analysis(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_A3Analysis);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_A3Analysis = function(request, callback) {
  this.output.writeMessageBegin('A3Analysis', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_A3Analysis_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_A3Analysis = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_A3Analysis_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'A3Analysis failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.A3AnalysisStatus = function(request, callback) {
  if (callback === undefined) {
    this.send_A3AnalysisStatus(request);
    return this.recv_A3AnalysisStatus();
  } else {
    var postData = this.send_A3AnalysisStatus(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_A3AnalysisStatus);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_A3AnalysisStatus = function(request, callback) {
  this.output.writeMessageBegin('A3AnalysisStatus', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_A3AnalysisStatus_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_A3AnalysisStatus = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_A3AnalysisStatus_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'A3AnalysisStatus failed: unknown result';
};
thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.A3AnalysisCancel = function(request, callback) {
  if (callback === undefined) {
    this.send_A3AnalysisCancel(request);
    return this.recv_A3AnalysisCancel();
  } else {
    var postData = this.send_A3AnalysisCancel(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_A3AnalysisCancel);
  }
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.send_A3AnalysisCancel = function(request, callback) {
  this.output.writeMessageBegin('A3AnalysisCancel', Thrift.MessageType.CALL, this.seqid);
  var args = new thrift.Sage.AutoComplete.AutoCompleteV2_A3AnalysisCancel_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

thrift.Sage.AutoComplete.AutoCompleteV2Client.prototype.recv_A3AnalysisCancel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new thrift.Sage.AutoComplete.AutoCompleteV2_A3AnalysisCancel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'A3AnalysisCancel failed: unknown result';
};
