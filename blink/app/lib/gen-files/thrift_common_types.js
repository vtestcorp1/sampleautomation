//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

if (typeof thrift === 'undefined') {
  thrift = {};
}
if (typeof thrift.common === 'undefined') {
  thrift.common = {};
}
thrift.common.ThriftRequest = function(args) {
  this.request = null;
  this.rpc_info = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
    if (args.rpc_info !== undefined) {
      this.rpc_info = args.rpc_info;
    }
  }
};
thrift.common.ThriftRequest.prototype = {};
thrift.common.ThriftRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.request = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.rpc_info = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.common.ThriftRequest.prototype.write = function(output) {
  output.writeStructBegin('ThriftRequest');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRING, 1);
    output.writeString(this.request);
    output.writeFieldEnd();
  }
  if (this.rpc_info !== null && this.rpc_info !== undefined) {
    output.writeFieldBegin('rpc_info', Thrift.Type.STRING, 2);
    output.writeString(this.rpc_info);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.common.ThriftResponse = function(args) {
  this.status = null;
  this.response = null;
  this.rpc_info = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.response !== undefined) {
      this.response = args.response;
    }
    if (args.rpc_info !== undefined) {
      this.rpc_info = args.rpc_info;
    }
  }
};
thrift.common.ThriftResponse.prototype = {};
thrift.common.ThriftResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.response = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.rpc_info = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.common.ThriftResponse.prototype.write = function(output) {
  output.writeStructBegin('ThriftResponse');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 1);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  if (this.response !== null && this.response !== undefined) {
    output.writeFieldBegin('response', Thrift.Type.STRING, 2);
    output.writeString(this.response);
    output.writeFieldEnd();
  }
  if (this.rpc_info !== null && this.rpc_info !== undefined) {
    output.writeFieldBegin('rpc_info', Thrift.Type.STRING, 3);
    output.writeString(this.rpc_info);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

