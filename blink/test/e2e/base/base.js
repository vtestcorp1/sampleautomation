/**
 * Copyright: ThoughtSpot Inc. 2013
 * Author: Vibhor Nanavati (vibhor@thoughtspot.com), Shikhar Agarwal (shikhar@thoughtspot,com)
 *
 * @fileoverview Base e2e angular scenario utilities and definitions.
 */

'use strict';

/* eslint no-undef: 0 */

(function unpackUiSelectors() {
    for (var key in uiSelectors) {
        if (uiSelectors.hasOwnProperty(key)) {
            window[key] = uiSelectors[key];
        }
    }
})();

window.ADMIN_USERNAME = 'tsadmin';
window.ADMIN_PASSWORD = 'admin';

function chartLegendMenuBtn() {
    return element(CHART_VIZ + ' .bk-legend');
}

function chartLegendItemSelector(itemName) {
    return contains('.bk-legend-item', itemName);
}

function toggleChartLegendItem(itemName) {
    element(contains('.bk-legend-item .bk-legend-label', itemName)).click();
}

function chartLegendItem(itemName) {
    return element(chartLegendItemSelector(itemName));
}

function getCurrentFutureIndex(futures) {
    for (var i=0; i<futures.length; i++) {
        if (!futures[i].fulfilled) {
            return i;
        }
    }
    return -1;
}

/**
 *
 * This method move the caret to a specific node inside
 * a contentEditable element
 *
 * @param $node
 * @param offsetInNode
 */

function setCursorInNode(appWindow, $node, offsetInNode) {

    var range = appWindow.document.createRange(),
        selection = appWindow.getSelection();
    if (offsetInNode < 0) {// set to the end
        range.selectNode($node[0]);
        range.collapse(false);
    } else {// set to the given index
        range.setStart($node[0].childNodes[0], offsetInNode);
        range.collapse(true);
    }
    selection.removeAllRanges();
    selection.addRange(range);
}

/**
 * Sets whether new futures are added to the front or back of the futures queue. Calling with true as the parameter
 * will mean that all the futures added in the future will be executed before all the currently pending futures.
 * Calling with false will revert to the default behavior.
 * This functionality enables nested futures.
 * @type {*}
 */
var setAddFuturesToFrontOfQueue = angular.scenario.dsl('setAddFuturesToFrontOfQueue', function () {
    return function (addToFront) {
        var proto = angular.scenario.SpecRunner.prototype;

        if (!addToFront) {
            if (proto._addFuture) {
                proto.addFuture = proto._addFuture;
                delete proto._addFuture;
            }
        } else {
            var originalAddFuture = proto._addFuture = proto.addFuture,
                indexToInsertAt = getCurrentFutureIndex(this.futures) + 1;

            proto.addFuture = function () {
                var rv = originalAddFuture.apply(this, arguments);
                //bring the future just added to the front
                this.futures.splice(indexToInsertAt++, 0, this.futures.pop());

                // need to set the after index for the runner to ensure that
                // if the one a future fails the spec is correctly ended.
                // without this the spec runner will take up a future from
                // a future in the middle of the queue and cause an infinite
                // loop
                var $scope = this;
                while($scope && !$scope.hasOwnProperty('afterIndex')) {
                    $scope = $scope.$parent;
                }
                if ($scope) {
                    $scope.afterIndex++;
                }

                return rv;
            };
        }
    };
});

/**
 * Ensures that all the futures generated by __behavior__ are executed before any of the currently pending
 * futures get executed.
 * @param behavior {Function}
 * @returns {*} the return value of __behavior__
 */
function makeFuturesSync(behavior) {
    setAddFuturesToFrontOfQueue(true);
    var rv;
    try {
        rv = behavior();
    } catch(e) {
        console.error(e);
    }
    setAddFuturesToFrontOfQueue(false);
    return rv;
}

/**
 * calls the function __functionReference__ with each of the matched jQuery elements which are represented by the
 * angular.element instance __el__. The return value of the call is passed as the future result
 * @param el
 * @param {Function(jQueryElement)} functionReference the function to call
 * @returns {*}
 */
function callFunctionWithElement(el, functionReference) {
    el = el || element('body');
    return el.query(function($e, done) {
        var rv = makeFuturesSync(function(){
            var window = $e[0].ownerDocument.defaultView,
                $ = window.$;
            return functionReference($e, window, $);
        });
        done(null, rv);
    });
}

function selectChosenOption(selector, textOrVal)
{
    callFunctionWithElement(element(selector), function($el, window, $){
        var $options = $el.find('option');
        for (var i=0; i<$options.length; i++) {
            var $option = $options.eq(i);
            if ($option.text() == textOrVal || $option.val() == textOrVal) {
                $($el[0]).val($option.val()).trigger('chosen:updated').trigger('change');
                return;
            }
        }
    });
}

function validateChosenOptions(selector, options) {
    return callFunctionWithElement(element(selector), function($el, window, $){
        var $options = $el.find('option');
        for (var i=0; i<$options.length; i++) {
            var $option = $options.eq(i);
            if ($option.text() != options[i] && $option.val() != options[i]) {
                return false;
            }
        }
        return true;
    });
}

function validateNotChosenOptions(selector, option) {
    return callFunctionWithElement(element(selector), function($el, window, $){
        var $options = $el.find('option');
        for (var i=0; i<$options.length; i++) {
            var $option = $options.eq(i);
            if ($option.text() == option) {
                return false;
            }
        }
        return true;
    });
}

/**
 * Refreshes the Object Search Index
 */
angular.scenario.dsl('refreshObjectSearch', function () {
    return function () {
        return this.addFutureAction('Refresh Object Search Index', function (appWindow, $document, done) {
            appWindow.angular.element(appWindow.document).injector().invoke(function($http){
                $http.get('/statusz/service?name=object_search').
                    success(function(data, status, headers, config) {
                            // this callback will be called asynchronously
                            // when the response is available
                        var objectSearchDetails = data.match(/<a href=([^>]*)>object_search<\/a>/);

                        if(!objectSearchDetails || !objectSearchDetails[1])
                            {
                            done();
                            return;
                        }

                        var objectSearchRefreshUrl = objectSearchDetails[1]+'refresh';

                        var iframe = appWindow.document.createElement("IFRAME");
                        iframe.setAttribute("src", objectSearchRefreshUrl);
                        iframe.style.width = "640px";
                        iframe.style.height = "480px";
                        appWindow.document.body.appendChild(iframe);

                        iframe.onload = function(){
                            appWindow.document.body.removeChild(iframe);
                            done();
                            return;
                        };
                        iframe.onerror = function(){
                            appWindow.document.body.removeChild(iframe);
                            done();
                            return;
                        };
                    }).
                    error(function(data, status, headers, config) {
                        done();
                        return;
                    });
            });
        });
    };
});

/**
 * Trigger a keydown on an element
 *
 * @param {string} selector     The selector for the element on which to trigger the event
 * @param {number} keyCode      The char code for the key we want to press (e.g. 13 for an enter keydown)
 * @param {boolean} addKeyPress If true, also trigger a keypress event. Useful to more closely simulate a real event.
 */
angular.scenario.dsl('keypress', function () {
    return function (selector, keyCode, addKeyDown, addKeyPress, addKeyUp) {
        return this.addFutureAction('Trigger a keydown on ' + selector,
            function (appWindow, $document, done) {
                if (addKeyDown) {
                    var keydownEvent = appWindow.$.Event('keydown', { which: keyCode, keyCode: keyCode });
                    appWindow.$(selector).trigger(keydownEvent);
                }
                if (addKeyPress) {
                    var keypressEvent = appWindow.$.Event('keypress', { which: keyCode, keyCode: keyCode });
                    appWindow.$(selector).trigger(keypressEvent);
                }
                if (addKeyUp) {
                    var keyupEvent = appWindow.$.Event('keyup', { which: keyCode, keyCode: keyCode });
                    appWindow.$(selector).trigger(keyupEvent);
                }
                done();
            });
    };
});

/**
 * @param {string} eventType The type of event to trigger
 * @param {string} selector  A selector for the elements on which to trigger the event
 * @param {Object} params    Any params to pass in with the event
 */
var triggerEvent = angular.scenario.dsl('triggerEvent', function () {
    return function (eventType, selector, params) {
        return this.addFutureAction(eventType, function (appWindow, $document, done) {
            var eventObj = appWindow.$.Event(eventType, params);
            appWindow.$(selector).trigger(eventObj);
            done();
        });
    };
});


// Custom Angular Scenario DSL
var highChartsColumnRectRightClick = angular.scenario.dsl('highChartsColumnRectRightClick', function () {
    return function (selector, columnId) {
        return this.addFutureAction('Clicking on chart ' + selector + ' rect ' + columnId,
            function (appWindow, $document, done) {
                // ==== HACK for simulating click on highcharts bar ===
                // Highcharts rides on the tooltip state to get the clicked point category,value pair.

                function getX(el) {
                    return parseInt(appWindow.$(el).attr('x'), 10);
                }

                var $columnRectSelector = $document.find(selector + ' .highcharts-tracker rect');
                //the rects don't necessarily appear in the DOM sorted by their x values (e.g. in the case sorting
                //is done on more than one dimension). Therefore we need to sort them by x to find the one with correct
                //position in x value order
                $columnRectSelector.sort(function(rect1, rect2){
                    return getX(rect1) - getX(rect2);
                });

                var $columnRect = $columnRectSelector.eq(columnId),
                    offsetParent = $columnRect.position(),
                    pagePosition = $columnRect.offset(),
                    offsetX = Math.round(offsetParent.left),
                    offsetY = Math.round(offsetParent.top),
                    pageX = Math.round(pagePosition.left),
                    pageY = Math.round(pagePosition.top),
                    mouseoverEvent = appWindow.$.Event('mouseover');

                mouseoverEvent.offsetX = offsetX;
                mouseoverEvent.offsetY = offsetY;
                mouseoverEvent.pageX = pageX;
                mouseoverEvent.pageY = pageY;

                $columnRect.click();
                $columnRect.trigger('mouseover');
                $columnRect[0].dispatchEvent(new window.MouseEvent('contextmenu', {bubbles:true}));

                done(null, $columnRect);
            });
    };
});

function clearLoggedErrors(appWindow) {
    appWindow.blink.app.logReporter.clearLog();
}

function getLoggedErrors(appWindow, severity) {
    var logReporter = appWindow.blink.app.logReporter,
        appLogs = logReporter.getLogQueue(),
        additionalErrors = '';

    if (appLogs && appLogs.length) {
        appLogs.reverse().map(function (appError) {
            if (!appError || (!!severity && appError.severity !== severity)) {
                return;
            }
            additionalErrors += '\n[' + appError.severity + '] ' + appError.incidentId + ': ' + appError.message;
        });
    }

    logReporter.clearLog();
    return additionalErrors;
}

// TODO(Vijay) - setting POLLING_TIMEOUT to 30000 to get past some perf issues in Sage/Callosum that blocks the
// tests from passing. This should be dropped down once the perf issues are fixed.
var POLLING_DELAY = 500,
    POLLING_TIMEOUT = 120000;
var waitFor = angular.scenario.dsl('waitFor', function () {
    return function (predicate, message, delay, timeout) {
        delay = delay === void 0 ? POLLING_DELAY : delay;
        timeout = timeout === void 0 ? POLLING_TIMEOUT : timeout;
        message = message || 'waiting for predicate to be true';

        var stack = (new Error()).stack;
        return this.addFutureAction(message, function (appWindow, $document, done) {
            var totalElapsedTime = 0;
            function checkPredicate(first) {
                if (predicate(appWindow)) {
                    done(null, {});
                    return;
                }
                if (totalElapsedTime < timeout) {
                    totalElapsedTime += delay;
                    appWindow.setTimeout(checkPredicate, delay);
                } else {
                    done('Timed out ' + message + '\n' + stack + '\n\nApp logs:' + getLoggedErrors(appWindow, 'WARN'), {});
                }
            }
            checkPredicate(true);
        });
    };
});

function waitForTableAnswerVisualizationMode() {
    return waitFor(function (appWindow) {
        appWindow.$(TABLE_SELECTOR_BUTTON_SELECTOR).click();

        var tableSelector = '.bk-viz[type=table]:visible, .bk-answer-table-viz-container:visible';
        return appWindow.$(tableSelector).length > 0;
    }, 'Waiting for the table view', 2000);
}

function waitForChartAnswerVisualizationMode() {
    return waitFor(function (appWindow) {
        appWindow.$(CHART_SELECTOR_BUTTON_SELECTOR).click();

        var chartSelector = '.bk-viz[type=chart]:visible, .bk-answer-chart-viz-container:visible';
        return appWindow.$(chartSelector).length > 0;
    }, 'Waiting for the chart view', 2000);
}

function getElementScrollTop(selector) {
    return callFunctionWithElement(element(selector), function($el){
        return $el.scrollTop();
    });
}

// Wait for the url path to match a certain value
function waitForPath(path) {
    return waitFor(function (appWindow) {
        return appWindow.location.hash == '#' + path;
    }, 'waiting for path to match ' + path);
}

function getCurrentQueryTextForAnswer(appWindow) {
    var answerDocElem = appWindow.$('.answer-document');
    var answerDocScope = answerDocElem && answerDocElem.scope();
    var answerDocCtrl = answerDocScope && answerDocScope.$ctrl;
    var latestAnswerModel = answerDocCtrl && answerDocCtrl.latestAnswerModel;
    var currentQuery = latestAnswerModel && latestAnswerModel.getQueryTextFromTokens();
    return currentQuery || '';
}

function waitForAnswerToLoad(query) {
    return waitFor(function(appWindow) {
        var currentQuery = getCurrentQueryTextForAnswer(appWindow);
        return currentQuery === query.trim();
    }, 'waiting for answer to load');
}

// Wait for answer to change
function waitForAnswerToChange() {
    var initialAnswerText = null;
    return waitFor(function (appWindow) {
        if (initialAnswerText === null) {
            initialAnswerText = getCurrentQueryTextForAnswer(appWindow);
            return false;
        }

        var currentQuery = getCurrentQueryTextForAnswer(appWindow);
        return currentQuery != initialAnswerText;
    }, 'waiting for answer to change');
}

// Wait for the url path to change
function waitForPathToChange() {
    var path;
    return waitFor(function (appWindow) {
        if (!path) {
            path = appWindow.location.hash;
            return false;
        }
        return appWindow.location.hash != path;
    }, 'waiting for path to change');
}

// Wait for the url path to change
function waitForPathToContain(string) {
    return waitFor(function (appWindow) {
        return appWindow.location.hash.indexOf(string) >= 0;
    }, 'waiting for path to contain' + string);
}

function waitForElement(selector, message) {
    return waitFor(function (appWindow) {
        return appWindow.$(selector).length > 0;
    }, (message || 'waiting for element ') + selector);
}

function waitForAndClickElement(selector){
    waitForElement(selector);
    element(selector).click();
}

function waitForElementText(selector, text) {
    waitFor(function (appWindow) {
        return appWindow.$(selector).text().trim() == text;
    }, 'Wait for element text to be {1}'.assign(text), 2000);

}

function openEditorTool() {
    element('.bk-chart-editor .bk-toolbar-btn-inner').click();
}

function maximizeChart(chartIndex) {
    if (chartIndex === void 0) {
        chartIndex = 0;
    }
    waitForAndClickElement(nth(CHART_VIZ + ' ' + ACTION_BUTTON_DROPDOWN, chartIndex + 1));
    waitForAndClickElement(START_SLIDE_SHOW);
}

function minimizeChart() {
    element('.bk-presentation-mode-container .bk-close-slideshow').click();
}

function drillClickOnColumn(selector, columnId) {
    highChartsColumnRectRightClick(selector, columnId);
    waitForElement('.bk-context-menu:visible', 'waiting for drill down menu');
}

function waitForSageDropDown() {
    waitForElement(AUTOCOMPLETE_ITEM, 'waiting for sage dropdown');
}

function waitForSageDropDownErrorSection() {
    waitForElement(AUTOCOMPLETE_ERROR_SECTION, 'waiting for sage dropdown error section');
}

function waitForSageDropdownWithoutHeader() {
    return waitFor(function (appWindow) {
        return appWindow.$(AUTOCOMPLETE_DDOWN + ' .bk-dropdown-list-header').children().length === 0;
    }, 'Waiting for simple sage dropdown without header');
}

function getAutoCompleteSuggestionText($body, index, removeLineage) {
    var fullSuggestionText = $body.find(nth(AUTOCOMPLETE_ITEM_LABEL, index + 1)).text();
    fullSuggestionText = fullSuggestionText.trim().replace(/\s+/g, ' ');

    if (!removeLineage) {
        return fullSuggestionText;
    }

    var lineageText = $body.find(first(AUTOCOMPLETE_ITEM_LINEAGE)).text();
    var lineageSuffixRegExp = new RegExp(lineageText.escapeRegExp() + '$');
    return fullSuggestionText.replace(lineageSuffixRegExp, '');
}

function getSageSuggestionContainingDocumentSelector(documentName) {
    return contains('.bk-dropdown-list-wrapper .bk-dropdown-list .item-text', documentName.capitalize(true));
}

function waitForSageSuggestionToPassPredicate(sageQuery, predicate, timeout){
    var toggleSwitch = true;

    return waitFor(function (appWindow) {
        if (predicate(appWindow)) {
            return true;
        }

        var $sageInput;

        var sageInputText = toggleSwitch ? sageQuery : '';

        $sageInput = appWindow.$(SAGE_INPUT);
        $sageInput.focus();
        $sageInput.val(sageInputText);
        $sageInput.trigger('input');
        $sageInput.trigger('change');

        toggleSwitch = !toggleSwitch;

        return false;
    }, 'Waiting for the sage suggestions to pass predicate: ' + predicate + ' ' + sageQuery, 500, timeout);
}

function waitForAnswerToBeIndexed(answerName) {
    var sageSuggestionSelector = getSageSuggestionContainingDocumentSelector(answerName);
    // by using answerName as sage query we expect object search results to appear
    waitForSageSuggestionToPassPredicate(answerName, function(appWindow){
        if(appWindow.$(sageSuggestionSelector).length > 0) {
            return true;
        }
        if (appWindow.$('.bk-empty-page-placeholder').length === 0) {
            return true;
        }
        return false;
    });
}


function chartTypeButton(chartType) {
    return '.bk-style-icon-chart-' + chartType.toLowerCase();
}

function waitForChartSelectorPanelIsOpen() {
    return waitFor(function (appWindow) {
        appWindow.$(CHART_SELECTOR_BUTTON_SELECTOR).click();

        return appWindow.$(CHART_SELECTOR_PANEL_SELECTOR).length > 0;
    }, 'Waiting for the chart selector panel', 2000);
}

function navigateToChartViewFromTable() {
    element(CHART_SELECTOR_BUTTON_SELECTOR).click();
    waitForElement(CHART_VIZ);
}

function ensureChartSelectorPanelIsOpen() {
    callFunctionWithElement(null, function($el, window, $) {
        var $panel = $(CHART_SELECTOR_PANEL_SELECTOR);
        if ($panel.is(':visible')) {
            return;
        }
        $(CHART_SELECTOR_BUTTON_SELECTOR).click();
    });
    waitForElement(CHART_SELECTOR_PANEL_SELECTOR, 'Chart selector panel not found.');
}

//TODO(Ashish): move the navigateToChartViewFromTable logic inside this.
function selectChartType(chartType) {
    ensureChartSelectorPanelIsOpen();
    element(chartTypeButton(chartType)).click();
    element(CHART_SELECTOR_BUTTON_SELECTOR).click();
}

function waitForElementToShow(selector, message) {
    return waitFor(function (appWindow) {
        return appWindow.$(selector).css('display') != 'none';
    }, ('Waiting for visualizations to clear') + selector);
}

function waitForElementCountToBe(selector, count) {
    return waitFor(function (appWindow) {
        return appWindow.$(selector).length === count;
    }, 'waiting for ' + selector + ' count to be ' + count);
}

function waitForHeadline(headlineTitle) {
    headlineTitle = headlineTitle || '';
    var headlineSelector = '.bk-viz[type=headline]:visible, ' +
        '.bk-answer-headline-viz-container:visible',
        waitMsg = 'waiting for headline to render';
    if (!!headlineTitle) {
        headlineSelector = contains(headlineSelector, headlineTitle);
        waitMsg = 'waiting for ' + headlineTitle + ' headline to render';
    }
    waitForElement(headlineSelector, waitMsg);
}

function waitForTable(selector) {
    waitForElement(selector || '.bk-table:visible', 'waiting for table to render');
}

function waitForHighcharts() {
    waitForElement(HIGHCHART_SELECTOR,
        'waiting for highcharts');
}

function waitForChartDataNotsupportedMessage() {
    waitForElement('.bk-viz-chart .chartDataNotSupported',
        'waiting for chart Data not supported');
}

function waitForFilter(selector) {
    waitForElement(selector || '.bk-sage-data .bk-sage-data-filters .bk-list-item', 'waiting for filter to render');
}

function clickFilterDoneButton() {
    element(FILTER_DONE_BUTTON).click();
}

function clickChartEditorDoneButton() {
    element(CHART_EDITOR_DONE_BUTTON_SELECTOR).click();
}

function waitForSageGhostToMatch(ghostPattern) {
    return waitFor(function (appWindow) {
        return ghostPattern.test(appWindow.$('.bk-sage-real-input-ghost').val());
    }, 'waiting to match ghost text with pattern ' + ghostPattern);
}

function waitForSageBarValueToBe(sageText) {
    return waitFor(function (appWindow) {
        return appWindow.$(SAGE_INPUT).val() === sageText;
    }, 'waiting for sage bar value to be ' + sageText);
}

function waitForSageBarValueToMatch(pattern) {
    return waitFor(function (appWindow) {
        return pattern.test(appWindow.$(SAGE_INPUT).val());
    }, 'waiting for sage bar value to match ' + pattern.toString());
}

function waitForCssPropertyToBe(selector, cssProp, value) {
    return waitFor(function (appWindow) {
        return appWindow.$(selector).css(cssProp) == value;
    }, 'waiting for css property ' + cssProp + ' of element ' + selector + ' to be ' + value);
}

/**
 * Wait for CSS opacity of a selector to reach a certain value.
 * Note that it is observed that opacity does not reach the desired value precisely,
 * therefore an approximate range check has been made.
 * @param selector
 * @param value
 * @returns {*}
 */
function waitForCssOpacityToBe(selector, value) {
    return waitFor(function (appWindow) {
        value = parseFloat(value);
        var cssOpacityFloat = parseFloat(appWindow.$(selector).css('opacity'));
        return ((value - 0.01) < cssOpacityFloat) && (cssOpacityFloat < (value + 0.01));
    }, 'waiting for css opacity of element ' + selector + ' to be ' + value);
}

/**
 * Tries to set the caret position. Depending on the browser, it may or may not be able to set it.
 * Returns true, if it was.
 * @param caretPosition
 * @returns {boolean}
 */
function setCaretInSageBar(sageInput, caretPosition) {
    if(sageInput.createTextRange) {
        var range = sageInput.createTextRange();
        range.move('character', caretPosition);
        range.select();
        return true;
    } else {
        if(sageInput.selectionStart) {
            sageInput.focus();
            sageInput.setSelectionRange(caretPosition, caretPosition);
            return true;
        } else {
            sageInput.focus();
            return false;
        }
    }
}

function setCaretPosition($inputEl, caretPosition) {
    var rawInputElement = $inputEl[0];
    if (rawInputElement.createTextRange) {
        var range = rawInputElement.createTextRange();
        range.move('character', caretPosition);
        range.select();
        return;
    } else if (rawInputElement.selectionStart) {
        $inputEl.focus();
        rawInputElement.setSelectionRange(caretPosition, caretPosition);
        return;
    }

    // If can not obtain caret api by above methods, simply focus.
    rawInputElement.focus();
}

function triggerKeyboardEvent(element, eventType, keyCode,
                              controlKeyDown, altKeyDown, shiftKeyDown, metaKeyDown) {
    // source: selenium source code

    controlKeyDown = !!controlKeyDown;
    altKeyDown = !!altKeyDown;
    shiftKeyDown = !!shiftKeyDown;
    metaKeyDown = !!metaKeyDown;

    var evt;
    if (element.fireEvent && element.ownerDocument && element.ownerDocument.createEventObject) { // IE
        evt = element.ownerDocument.createEventObject();
        evt.shiftKey = shiftKeyDown;
        evt.metaKey = metaKeyDown;
        evt.altKey = altKeyDown;
        evt.ctrlKey = controlKeyDown;

        evt.keyCode = keyCode;
        element.fireEvent('on' + eventType, evt);
    }
    else {

        if (element.ownerDocument.defaultView.KeyEvent) {
            evt = element.ownerDocument.createEvent('KeyEvents');
            evt.initKeyEvent(eventType, true, true, element.ownerDocument.defaultView,
                controlKeyDown, altKeyDown, shiftKeyDown, metaKeyDown,
                keyCode, keyCode);

        } else {
            evt = element.ownerDocument.createEvent('Events');

            evt.shiftKey = shiftKeyDown;
            evt.metaKey = metaKeyDown;
            evt.altKey = altKeyDown;
            evt.ctrlKey = controlKeyDown;

            evt.initEvent(eventType, true, true, window, 1);
            evt.keyCode = keyCode;
            evt.which = keyCode;
        }

        element.dispatchEvent(evt);
    }
}

function enterQueryInSageBar(appWindow, sageSelector, query) {
    var $sageInput = appWindow.$(sageSelector);
    $sageInput.focus().val(query).trigger('click').trigger('input').trigger('change');
}

var sageInputElement = angular.scenario.dsl('sageInputElement', function (insideVizContext) {
    var chain = {},
        selector = insideVizContext ? VIZ_CONTEXT + ' ' + SAGE_INPUT : SAGE_INPUT;
    chain.enter = function (val) {
        return this.addFutureAction('Entering ' + val + ' into sage bar', function (appWindow, $document, done) {
            enterQueryInSageBar(appWindow, selector, val);
            /*
            // NOTE(vibhor): Due to an angular synchronization issue with IE, force the caret to be at the end of
            // the input after this call. The caret position can change the behavior of sage server and thus the response.
            setCaretPosition($sageInput, val.length);
            */
            done();
        });
    };
    chain.val = function () {
        return this.addFutureAction('Getting value from sage bar', function (appWindow, $document, done) {
            var $sageInput = $document.find(selector);
            done(null, $sageInput.val());
        });
    };
    chain.focus = function () {
        return this.addFutureAction('Focus in sage bar', function (appWindow, $document, done) {
            var $sageInput = $document.find(selector);
            $sageInput.focus();
            done();
        });
    };
    chain.blur = function () {
        return this.addFutureAction('Take focus away from sage bar', function (appWindow, $document, done) {
            var $sageInput = $document.find(selector);
            $sageInput.blur();
            done();
        });
    };
    chain.click = function () {
        return this.addFutureAction('Click in sage bar', function (appWindow, $document, done) {
            var $sageInput = $document.find(selector);
            $sageInput.click();
            done();
        });
    };
    chain.pressEnter = function () {
        return this.addFutureAction('Pressing "enter" in sage bar', function (appWindow, $document, done) {

            var $sageInput = $document.find(selector);
            $sageInput.focus();
            triggerKeyboardEvent($sageInput[0], 'keydown', 13);
            done();

        });
    };
    // Triggers the change event on the sage bar. Change is the event over which the sage call is made.
    chain.triggerChange = function () {
        return this.addFutureAction('Triggering change in sage bar', function (appWindow, $document, done) {
            var $sageInput = $document.find(selector);
            $sageInput.change();
            done();

        });
    };
    return function () {
        return chain;
    };
});

function waitForSageIndexing(sourceToBeIndexed, testQuery, testFn) {
    sageInputElement().enter(testQuery);
    var toggleSwitch = false;

    waitFor(function (appWindow) {
        var success = testFn(appWindow.$('.bk-sharable-item'));
        if (success) {
            return true;
        }

        if (!toggleSwitch) {
            enterQueryInSageBar(appWindow, SAGE_INPUT, testQuery);
        } else {
            enterQueryInSageBar(appWindow, SAGE_INPUT, '');
        }

        toggleSwitch = !toggleSwitch;
        return false;
    }, 'waiting for sage to index ' + sourceToBeIndexed, 1000, 300 * 1000);
}

var blinkInput = angular.scenario.dsl('blinkInput', function () {
    var chain = {};
    var supportInputEvent =  'oninput' in document.createElement('div');

    chain.enter = function (val) {
        return this.addFutureAction('Entering ' + val + ' into input ' + this.selector, function (appWindow, $document, done) {
            var $input = appWindow.$(this.selector).filter('input');
            $input.val(val);
            $input.trigger(supportInputEvent ? 'input' : 'change');
            done();
        });
    };
    chain.val = function () {
        return this.addFutureAction('Getting value from input ' + this.selector, function (appWindow, $document, done) {
            var $input = appWindow.$(this.selector).filter('input');
            done(null, $input.val());
        });
    };
    chain.blur = function () {
        return this.addFutureAction('Blurring input ' + this.selector, function (appWindow, $document, done) {
            var $input = appWindow.$(this.selector).filter('input');
            $input.blur();
            done();
        });
    };
    chain.pressEnter = function () {
        return this.addFutureAction('Pressing enter into input ' + this.selector, function (appWindow, $document, done) {
            var $input = appWindow.$(this.selector).filter('input');

            var e1 = appWindow.$.Event('keydown', {which: 13}),
                e2 = appWindow.$.Event('keyup', {which: 13});
            appWindow.$(appWindow).trigger(e1);
            appWindow.$(appWindow).trigger(e2);

            $input.trigger(e1);
            $input.trigger(e2);

            done();
        });

    };

    return function (selector) {
        this.selector = selector;
        return chain;
    };
});

function searchMetadataItem(name) {
    blinkInput('.bk-list-search .bk-search-input').enter(name);
    blinkInput('.bk-list-search .bk-search-input').pressEnter();
}

var differenceOfFutures = angular.scenario.dsl('differenceOfFutures', function () {
    return function (future1, future2) {
        return this.addFuture('Computing difference of future values', function (done) {
            done(null, parseInt(future1.value, 10) - parseInt(future2.value, 10));
        });
    };
});


function checkIfDropDownFollowsKeyDownEvent(elementSelector, highlightedClass, $) {
    var suggestions = $(elementSelector);
    // we check if the highlighted element is correct after a keydown event
    // if not, we immediately return false
    for (var currentHighlightedElement = 0; currentHighlightedElement < suggestions.length; i++) {
        if (!suggestions.eq(i).hasClass(highlightedClass)) {
            return false;
        }
        triggerKeyboardEvent($('.content-editor')[0], $.ui.keyCode.DOWN);
    }
    return true;
}

function sageInput() {
    return input('sageInput');
}

function sageBar() {
    return element(SAGE_INPUT);
}

function sageBarValue() {
    return sageBar().val();
}

function sageBarGhostVal() {
    return element('.bk-sage-real-input-ghost').val();
}

function sageBarSearchIcon() {
    return element('.bk-sage-bar .bk-sage-search-icon');
}

function sageDropdownErrorSection() {
    return element(AUTOCOMPLETE_ERROR_SECTION);
}

function sageErrorBubbleVisible() {
    return element('.bk-sage-bubble.bk-error:visible');
}

function sageSuggestionBubbleVisible() {
    return element('.bk-sage-bubble.bk-suggestion:visible');
}

function sageWarningBubbleVisible() {
    return element('.bk-sage-bubble.bk-warning:visible');
}

function sageBubbleContent() {
    return element('.bk-sage-bubble-content');
}

function sagePhraseBox(text) {
    return element('.bk-boxed-token-layer .bk-boxed-token:contains({1})'.assign(text));
}

function firstSageAttribute(capitalize) {
    var FIRST_ATTRIBUTE = 'customer region';
    if (capitalize) {
        // Returns the attribute with first lettter uppercase, for example "Customer region"
        return FIRST_ATTRIBUTE.charAt(0).toUpperCase() + FIRST_ATTRIBUTE.substring(1);
    }
    return FIRST_ATTRIBUTE;
}

function secondSageAttribute() {
    return 'market segment';
}

function sageDataSourceDialog() {
    return element(DATA_SOURCE_SELECTOR_DIALOG);
}

function sageDataSourceBtn() {
    return element(DATA_SOURCE_OPEN_BTN);
}

function sageDataSourceSelectAll(listType) {
    var listSelector = contains(DATA_SOURCE_LIST, listType || '');
    return element(listSelector + ' .bk-list-select-all .bk-checkbox');
}

function sageDataSourceItemSelector(text, listType) {
    var listSelector = contains(DATA_SOURCE_LIST, listType || 'Tables');
    return contains(listSelector + ' .bk-list-item', text);
}

function sageDataSourceItem(text, listType) {
    return element(sageDataSourceItemSelector(text, listType));
}

function sageDataSourceSelectedItem(text, listType) {
    return element(sageDataSourceItemSelector(text, listType) + ' .bk-checked');
}

function toggleSageDataSourceDialog(isOpen) {
    var initCount = 0;
    if (isOpen) {
        initCount = 1;
    }
    expect(sageDataSourceDialog().count()).toBe(initCount);
    sageDataSourceBtn().click();
    expect(sageDataSourceDialog().count()).toBe((initCount + 1) % 2);
}

function toggleDataSourceItems(items, isSelected) {
    toggleSageDataSourceDialog();

    var initCount = 0;
    if (isSelected) {
        initCount = 1;
    }

    items.forEach(function (item) {
        expect(sageDataSourceSelectedItem(item).count()).toBe(initCount);
        sageDataSourceItem(item).click();
        expect(sageDataSourceSelectedItem(item).count()).toBe((initCount + 1) % 2);
    });

    toggleSageDataSourceDialog(true);
}

function testForNoSourcesTootlip(mustBeHere) {
    var count = mustBeHere ? 1 : 0;

    expect(element(SAGE_NO_SOURCES_TOOLTIP + ':visible').count()).toBe(count);
    expect(element(SAGE_OVERLAY + ':visible').count()).toBe(count);
}

function sageDataColumnSourceItemSelector(text) {
    if (text) {
        return contains(DATA_COLUMN_SOURCE_ITEM_NAME, text);
    } else {
        return DATA_COLUMN_SOURCE_ITEM_NAME;
    }
}

function sageDataColumnItemSelector(text) {
    if (text) {
        return contains(DATA_COLUMN_ITEM, text);
    } else {
        return DATA_COLUMN_ITEM;
    }
}

function sageDataColumnSourceTableItemSelector(text) {
    if (text) {
        return contains(DATA_COLUMN_SRC_TABLE_ITEM, text);
    } else {
        return DATA_COLUMN_SRC_TABLE_ITEM;
    }
}

function sageDataColumnSourceItem(text) {
    return element(sageDataColumnSourceItemSelector(text));
}

function sageDataColumnItem(text) {
    return element(sageDataColumnItemSelector(text));
}

function sageDataColumnCurrentSelectedItem(text) {
    return element(sageDataColumnItemSelector(text) + '.current-selected');
}

function sageDataColumnSelectedItem(text) {
    return element(sageDataColumnItemSelector(text) + '.selected');
}

function sageDataColumnItemMenuSelector(colName) {
    if (colName) {
        return contains(DATA_COLUMN_ITEM_MENU, colName);
    } else {
        return DATA_COLUMN_ITEM_MENU;
    }
}

function sageDataColumnItemMenuAddSearch(colName) {
    sageDataColumnItem(colName).dblclick();
}

function sageDataFilterBtn() {
    return element('.bk-sage-data .bk-filters-container .bk-open-btn');
}

function sageDataFilterItemSelector(name) {
    if (name) {
        return contains(DATA_FILTER_ITEM, name);
    } else {
        return DATA_FILTER_ITEM;
    }
}

function sageDataFilterItem(name) {
    return element(sageDataFilterItemSelector(name));
}

function sageDataFilterItemDelete(colName) {
    return element(sageDataFilterItemSelector(colName) + ' .close-icon');
}

function selectUiSelectOption(selector, textOrVal) {
    var rowSelect = '.ui-select-choices-row';

    element(selector).click();
    triggerEvent('focus', selector);
    element(selector).val(textOrVal);
    triggerEvent('change', selector);
    element( rowSelect + ':contains("' + textOrVal + '")').click();
    triggerEvent('blur', selector);
}

function sageDataFilterPopupSelector(colName, aggr) {
    return DATA_FILTER_POPUP;
    // TODO(Jasmeet): We dont have any UI property that has the name. Perhaps we can remove this
    // hook and only use values validation.
    //if (colName) {
    //    var str = contains(DATA_FILTER_POPUP, colName);
    //
    //    if (aggr) {
    //        return contains(str, aggr);
    //    }
    //    return str;
    //} else {
    //    return DATA_FILTER_POPUP;
    //}
}

function sageDataFilterPopup(colName, aggr) {
    return element(sageDataFilterPopupSelector(colName, aggr));
}

function sageDataFilterCBContentSelector(params) {
    params = params || {};
    var filterItem = sageDataFilterPopupSelector(params.colName, params.aggr) + ' .bk-cb-filter-content';
    return filterItem;
}

function sageDataFilterCBItemSelector(params) {
    params = params || {};
    var filterItem = sageDataFilterPopupSelector(params.colName, params.aggr) + ' .bk-cb-filter-content .bk-checkbox-title';

    if (params.selected) {
        filterItem += '.bk-selected';
    }

    if (params.colValue) {
        return contains(filterItem, params.colValue);
    }
    return filterItem;
}

function sageDataFilterCBItem(params) {
    return element(sageDataFilterCBItemSelector(params));
}

function filterTitle(columnName, includeNonActive) {
    columnName = columnName || '';
    if (!!columnName) {
        return contains(DATA_FILTER_ITEM, columnName);
    }
    return DATA_FILTER_ITEM;
}

function expectNoErrorNotif() {
    return expect(element(visible(ERROR_NOTIF)).count()).toBe(0);
}
function errorNotification(message) {
    message = message || '';
    return element(contains(ERROR_NOTIF, message));
}

function expectSuccessNotif(optSuccessMsg) {
    optSuccessMsg = optSuccessMsg || '';
    waitForElementCountToBe(contains(SUCCESS_NOTIF, optSuccessMsg), 1);
}

function chartElementWithType(chartType) {
    return element(CHART_VIZ + ' .bk-chart[chart-type="' + chartType + '"]');
}

function vizTitle(vizSelector) {
    return vizSelector + ' .bk-viz-header .bk-viz-title-section';
}

function saveBtn(isAnswer) {
    var dropdownSelector = isAnswer
        ? ACTION_BUTTON_DROPDOWN
        : SHARABLE_PANEL_ACTION_BUTTON_DROPDOWN;
    waitForAndClickElement(dropdownSelector);
    return element('.bk-action-dropdown .bk-action-save');
}

function updateBtn() {
    waitForAndClickElement(ACTION_BUTTON_DROPDOWN);
    return element('.bk-action-dropdown .bk-action-update');
}

function saveAsBtn(isAnswer) {
    var dropdownSelector = isAnswer
        ? ACTION_BUTTON_DROPDOWN
        : SHARABLE_PANEL_ACTION_BUTTON_DROPDOWN;
    waitForAndClickElement(dropdownSelector);
    return element('.bk-action-dropdown .bk-action-save-untitled');
}

function saveAsWorksheetBtn() {
    var dropdownSelector = ACTION_BUTTON_DROPDOWN;
    waitForAndClickElement(dropdownSelector);
    return element('.bk-action-dropdown .bk-action-save-as-worksheet');
}

function makeACopyBtnSelector(isAnswer) {
    var dropdownSelector = isAnswer
        ? ACTION_BUTTON_DROPDOWN
        : SHARABLE_PANEL_ACTION_BUTTON_DROPDOWN;
    waitForAndClickElement(dropdownSelector);
    return '.bk-action-dropdown .bk-action-make-copy';
}

function makeACopyBtn(isAnswer) {
    return element(makeACopyBtnSelector(isAnswer));
}

function shareBtn(isAnswer) {
    var dropdownSelector = isAnswer
        ? ACTION_BUTTON_DROPDOWN
        : SHARABLE_PANEL_ACTION_BUTTON_DROPDOWN;
    waitForAndClickElement(dropdownSelector);
    return element('.bk-action-dropdown .bk-action-share');
}

function dialog() {
    return element('.bk-dialog');
}

function saveDialog() {
    return element('.bk-answer-save-dialog');
}

function shareDialog() {
    return element('.bk-share-dialog');
}

function primaryDialogBtn() {
    return element(PRIMARY_DIALOG_BUTTON_SELECTOR);
}

function secondaryDialogBtn() {
    return element('.bk-dialog .bk-cancel-button');
}

function secondaryCancelBtn() {
    return element('.bk-dialog .bk-confirm-btn');
}

function dialogBody() {
    return element('.bk-dialog .modal-body');
}

function answerTab() {
    return element(ANSWER_TAB);
}

function answersTab() {
    return element('.bk-primary-nav-answers');
}

function pinboardsTab() {
    return element('.bk-primary-nav-pinboards');
}

function pinboardsTableDeletionBtn() {
    var vizSelector = '.bk-viz[type=table]';
    var dropDownBtnSelector = [vizSelector, ACTION_BUTTON_DROPDOWN].join(' ');
    waitForAndClickElement(dropDownBtnSelector);
    return element('.bk-viz-delete-btn');
}

function homeTab() {
    return element(HOME_TAB);
}

function adminMenuItem() {
    return element(ADMIN_NAV_TAB);
}

function metadataListCheckbox(text) {
    return element(contains(METADATA_LIST_ITEM, text) + ' .bk-checkbox');
}

function myAnswersFilter() {
    return element('.bk-top-menu-filters li.bk-category-:contains("Yours")');
}

function allAnswersFilter() {
    return element('.bk-top-menu-filters li.bk-category-:contains("All")');
}

function askQuestionButton() {
    return element('.answer-new-button .bk-primary-button');
}

function createPinboardButton() {
    return element('.bk-action-pinboard');
}

function metadataListSelectorContaining(text) {
    return contains(METADATA_LIST_ITEM, text) + ' .bk-name';
}

function metadataListContaining(text) {
    return element(metadataListSelectorContaining(text));
}

function metadataDeleteBtnSelector() {
    return '.bk-generic-list .bk-list-bulk-actions .bk-style-icon-delete';
}

function metadataDeleteBtn() {
    return element(metadataDeleteBtnSelector());
}

function metadataEditBtn() {
    return element('.bk-metadata-edit');
}
// Returns the items in the answers metadata list page that match the given text
function answerContaining(text) {
    return element(contains(ANSWER_ITEM, text) + ' .bk-name');
}

function pinboardListItemContaining(text) {
    return element(contains(PINBOARD_ITEM, text) + ' .bk-name');
}

/* Data (worksheets, imported data, tables */

function dataTab() {
    return element('.bk-primary-nav-manage-data');
}

function worksheetsFilter() {
    return element('.bk-top-menu-filters .bk-category-:contains("Worksheets")');
}

function clickImportDataButton() {
    element(ACTION_BUTTON_DROPDOWN).click();
    waitForAndClickElement(contains(NEW_ITEM_ACTION, 'Upload data'));
}

function importDataDisabledBtn() {
    return element(contains(NEW_ITEM_ACTION + '.bk-dropdown-item-disabled', 'Upload data'));
}

function importedDataTabTitle() {
    return element('.bk-generic-list .bk-header-menu-items a[ng-href$="importeddata"]');
}

function importedDataItem(fileName) {
    return element(contains('.bk-generic-list .bk-content .bk-list-content li', fileName));
}

function worksheetContaining(text) {
    return element(contains(WORKSHEET_ITEM, text) + ' .bk-name');
}

function schedulerIcon() {
    return element(SCHEDULER_ICON);
}

function schedulerElement(id) {
    return element(id);
}

function clickNewPinboardButton() {
    waitForElement(CREATE_NEW_PINBOARD);
    element(CREATE_NEW_PINBOARD).click();
}

function createNewWorksheetBtn() {
    return element(contains(NEW_ITEM_ACTION, "Create worksheet"));
}

function importSchemaBtn() {
    return element(contains(NEW_ITEM_ACTION, "Upload schema"));
}

function headlineValue(parentHeadline) {
    return element(parentHeadline + ' .bk-headline-value').html();
}

function headlineColumnNameNoAggregation(parentHeadline) {
    return element(parentHeadline + ' .bk-headline-column-name').html();
}

function headlineColumnNameAggregation(parentHeadline) {
    return element(parentHeadline + ' .column-name').html();
}

function bkSelected(cssSelector) {
    return cssSelector + '.bk-selected';
}

/**
 * calls a method with __methodName__ on an elements matching selector with variable number of arguments. The return value
 * of the call is passed as the future result. Unlike angular.element This method allows you to work with selectors
 * that might not match anything (angular.element throws error in a method is called on an angular.element that does
 * not match anything in the DOM
 * @param {string} selector
 * @param {string} methodName the name of the function to be called
 * @param {...} varargs arguments to the function to be called
 * @returns {*}
 */
function callMethodOnSelector(selector, methodName, varargs) {
    var args = Array.prototype.slice.call(arguments, 2);
    return element('body').query(function($body, done) {
        var selection = $body.find(selector),
            rv;
        rv = selection[methodName].apply(selection, args);
        done(null, rv);
    });
}

/**
 * calls a method with __methodName__ on an angular __element__ with variable number of arguments. The return value
 * of the call is passed as the future result
 * @param el an instance of angular element
 * @param {string} methodName the name of the function to be called
 * @param {...} varargs arguments to the function to be called
 */
function callMethodOnElement(el, methodName, varargs) {
    var args = Array.prototype.slice.call(arguments, 2);
    return el.query(function(e, done) {
        var rv = e[methodName].apply(e, args);
        done(null, rv);
    });
}

/**
 * Calls the callback with reference to the angular injectable component
 * (Controller, Service etc). Useful for run time modification of code
 * for testing purposes.
 *
 * @param {string} componentName
 * @param {Function} callback
 */
function getAngularInjectableComponent(componentName, callback) {
    callFunctionWithElement(null, function($body, appWindow){
        appWindow.angular.element(appWindow.document)
            .injector().invoke([componentName,
                function(componentReference) {
                    callback(componentReference);
                }
            ]);
    });
}

function rightClick(selector) {
    callFunctionWithElement(null, function($body, window, $){
        $(selector).trigger('contextmenu');
    });
}

function waitForSageBar() {
    waitForElementCountToBe('.bk-sage', 1);
}

function waitForLeftPanel() {
    waitForElementCountToBe(LEFT_PANEL, 1);
    waitForElementToShow(LEFT_PANEL);
}

function ensureLeftPanelIsOpened() {
    callFunctionWithElement(element('.bk-manage-sources'), function($el, window, $) {
        if ($el.is(':visible')) {
            return;
        }
        waitForAndClickElement(DATA_SOURCE_SHOW_BTN);
    });
    waitForLeftPanel();
}

function waitForNoVizPlaceholder() {
    waitForElementCountToBe(NO_VIZ_PLACEHOLDER, 1);
}

function waitForEmptyAnswer() {
    waitForSageBar();
    waitForLeftPanel();
    waitForNoVizPlaceholder();
}

function navigateBrowserToHome() {
    browser().navigateTo(HOME_URL);
    waitForElement(HOME_TAB);
}

function goToHome() {
    homeTab().click();
    waitForPath('/');
}

function goToAnswer() {
    homeTab().click();
    waitForPath('/');
    answerTab().click();
    waitForPath('/answer/');
    waitForEmptyAnswer();
}

function goToAnswerDirectly(){
    answerTab().click();
    waitForPath('/answer/');
    waitForEmptyAnswer();
}

function openDataExplorer(tableName) {
    goToAnswer();
    waitForElement(SAGE_DATA_PANEL, 'waiting for sage data panel');
    element(DATA_SOURCE_OPEN_BTN).click();
    element('.bk-sage-data .bk-sources-container .bk-manage-sources .bk-secondary-button .bk-text:contains(Explore all data)').click();
    if (tableName) {
        element(contains(DATA_EXPLORER_TABLE_LIST + ' .bk-tablename', tableName)).click();
    }
}

function closeDataExplorer() {
    element('.bk-big-popup .bk-close').click();
}

function waitForListToDisplay() {
    waitForElement(LIST_ADMIN_ITEM, 'Waiting for the list to display');
}

function goToUserManagementPage() {
    var userTabAdminPageSelector = '.tab-navigation .bk-tab-header .tab-header-item:contains(Users)';
    adminMenuItem().click();
    waitForElement(userTabAdminPageSelector);
    element(userTabAdminPageSelector).click();
    waitForListToDisplay();
}

function goToDebugPage() {
    // Debug page is hidden, so there's no button to click
    // to access this page
    callFunctionWithElement(null, function($body, window, $){
        window.location.hash = '#/debug';
    });
}

function goToGroupManagement() {
    var groupTabAdminPageSelector = '.tab-navigation .bk-tab-header .tab-header-item:contains(Groups)';
    adminMenuItem().click();
    waitForElement(groupTabAdminPageSelector);
    element(groupTabAdminPageSelector).click();
    waitForListToDisplay();
}

function goToRoleManagement() {
    var roleTabAdminPageSelector = '.tab-navigation .bk-tab-header .tab-header-item:contains(Roles)';
    adminMenuItem().click();
    waitForElement(roleTabAdminPageSelector);
    element(roleTabAdminPageSelector).click();
    waitForListToDisplay();
}

function createNewUser(displayName, username, password) {
    goToUserManagementPage();

    element(contains('.bk-new-item-container .bk-new-action-item','Add User')).click();

    input('data.customData.displayName').enter(displayName);
    input('data.customData.userName').enter(username);
    input('data.customData.password').enter(password);
    input('data.customData.confirmPassword').enter(password);

    element(PRIMARY_DIALOG_BUTTON_SELECTOR).click();
}

function deleteItemByName(displayName) {
    goToUserManagementPage();
    element(contains(LIST_ITEM, displayName) + ' .bk-checkbox-container').click();
    element('.bk-list-container .bk-action-container .bk-style-icon-delete').click();
    element('.bk-dialog .bk-save-btn').click();
}

function waitForSharableItemTitle(title) {
    waitFor(function(appWindow){
        var $elem = appWindow.$('.bk-sharable-item-title .bk-editable .bk-editable-input');
        var name = '';
        if (!!$elem) {
            name = $elem.val();
        }
        var position = -1;
        if (!!name) {
            position = name.indexOf(title);
        }
        return position > -1;
    }, 'waiting for sharable item title to match.');
}

function waitForAnswerName(answerName) {
    waitFor(function(appWindow){
        var $elem = appWindow.$('.bk-answer-title.bk-editable .bk-editable-input');
        var name = '';
        if (!!$elem) {
            name = $elem.val();
        }
        var position = -1;
        if (!!name) {
            position = name.indexOf(answerName);
        }
        return position > -1;
    }, 'waiting for answer name to match.');
}

function createAndSaveAnswer(sageQuery, answerName, dontWaitForHighCharts) {
    goToAnswer();

    sageInputElement().enter(sageQuery);
    if (!dontWaitForHighCharts) {
        waitForHighcharts();
    }

    saveCurrentAnswer(answerName);
}

function saveCurrentWorksheet(worksheetName) {
    if (!worksheetName) {
        saveBtn().click();
    } else {
        callFunctionWithElement(null, function($body, window, $){
            saveAsBtn().click();
            expect(saveDialog().count()).toBe(1);
            input('data.customData.questionHeader').enter(worksheetName);
            primaryDialogBtn().click();
            expect(saveDialog().count()).toBe(0);
            waitForSharableItemTitle(worksheetName);
        });
    }
}

function saveCurrentAnswer(answerBookName) {
    if (!answerBookName) {
        saveBtn(true).click();
    } else {
        callFunctionWithElement(null, function($body, window, $){
            saveAsBtn(true).click();
            expect(saveDialog().count()).toBe(1);
            input('data.customData.questionHeader').enter(answerBookName);
            primaryDialogBtn().click();
            expect(saveDialog().count()).toBe(0);
            waitForAnswerName(answerBookName);
        });
    }
}

function makeAnswerCopy(answerName) {
    callFunctionWithElement(null, function($body, window, $){
        makeACopyBtn(true).click();
        expect(saveDialog().count()).toBe(1);
        input('data.customData.questionHeader').enter(answerName);
        primaryDialogBtn().click();
        expect(saveDialog().count()).toBe(0);
        waitForAnswerName(answerName);
    });
}

function makeDocumentCopy(documentName) {
    callFunctionWithElement(null, function($body, window, $){
        makeACopyBtn().click();
        expect(saveDialog().count()).toBe(1);
        input('data.customData.questionHeader').enter(documentName);
        primaryDialogBtn().click();
        expect(saveDialog().count()).toBe(0);
        waitForAnswerName(documentName);
    });
}

function saveCurrentPinboard(pinboardName) {
    saveCurrentAnswer(pinboardName);
}

function openSavedAnswerContaining(bookName, vizTypeToWaitFor) {
    answersTab().click();
    // Open the saved book and verify that this is the same answerbook that was saved.
    answerContaining(bookName).click();
    vizTypeToWaitFor = vizTypeToWaitFor || CHART_VIZ;
    if (vizTypeToWaitFor == CHART_VIZ){
        waitForHighcharts();
    } else {
        waitForTable();
    }
}

function clearAnswer() {
    sageInputElement().enter('');
    waitForNoVizPlaceholder();
    expect(sageBarValue()).toBe('');
}

function waitForDataItemCountToBe(tableName, count) {
    return waitFor(function (appWindow) {
        if(appWindow.$(metadataListSelectorContaining(tableName)).length === count) {
            return true;
        }
        appWindow.$(HOME_TAB).click();
        appWindow.$(DATA_TAB).click();
        return false;
    }, 'waiting for ' + tableName  + ' count to be ' + count, 2000);
}

function waitForSuccessDisplay() {
    return waitFor(function (appWindow) {
        return appWindow.$(SCHEMA_IMPORT_SUCCESS_DIALOG).length === 1;
    }, 'waiting for success window.');
}

/**
 * Given an array of item texts, deletes them
 * @param itemTexts
 */
function deleteMetadataListItems(itemTexts, ignoreNonExistent, doNotAutoCloseDialog) {
    return callFunctionWithElement(null, function($body, window, $) {
        if (ignoreNonExistent) {
            //copy so as to not change the incoming array
            itemTexts = itemTexts.slice(0);

            var existent = [];
            itemTexts.forEach(function(itemText){
                if ($body.find(metadataListSelectorContaining(itemText)).length > 0) {
                    existent.push(itemText);
                }
            });

            itemTexts.length = 0;
            itemTexts.push.apply(itemTexts, existent);

        }

        itemTexts.forEach(function (text) {
            searchMetadataItem(text);

            expect(metadataListContaining(text).count()).toBeGreaterThan(0);
            metadataListCheckbox(text).click();
        });

        if ($body.find(metadataDeleteBtnSelector()).length === 0) {
            return;
        }

        metadataDeleteBtn().click();

        if (!doNotAutoCloseDialog) {
            if (itemTexts.length > 0) {
                expect(dialog().count()).toBe(1);
                primaryDialogBtn().click();
                expect(dialog().count()).toBe(0);
                // Expect Success Notification
                expectSuccessNotif('deleted');
            }
        }
        searchMetadataItem(' '); // clear the list or it will mess subsequent deletions
    });
}

function deleteSavedAnswer(answerBookName, ignoreNonExistent) {
    answersTab().click();

    if (!ignoreNonExistent) {
        // Expect the saved answer to be present in the answers list.
        searchMetadataItem(answerBookName);
        expect(answerContaining(answerBookName).count()).toBeGreaterThan(0);
    }
    deleteMetadataListItems([answerBookName], !!ignoreNonExistent);
    // Expect the deleted answer to be gone.
    expect(answerContaining(answerBookName).count()).toBe(0);
}

function deletePinboard(name) {
    pinboardsTab().click();
    waitForPath('/pinboards');
    // Expect the pinboard to be present in the pinboards list.
    expect(pinboardListItemContaining(name).count()).toBe(1);
    deleteMetadataListItems([name]);
    // Expect the deleted pinboard to be gone.
    expect(pinboardListItemContaining(name).count()).toBe(0);
}

function deleteWorksheet(name, ignoreNonExistent) {
    dataTab().click();
    if (!ignoreNonExistent) {
        expect(worksheetContaining(name).count()).toBe(1);
    }
    deleteMetadataListItems([name], ignoreNonExistent);
    expect(worksheetContaining(name).count()).toBe(0);
}

// Will open a broken worksheet, click "Edit" and then
// click "remove" in the suggestion to remove broken columns.
// After that it will save the worksheet.
function fixWorksheet(name) {
    var removeBtnSelector = '.bk-warning-message-action-link:contains("remove")';
    dataTab().click();
    element(metadataListSelectorContaining(name)).click();
    element('.bk-metadata-edit').click();
    waitForElement(removeBtnSelector);
    expect(element(removeBtnSelector).count()).toBe(1);
    element(removeBtnSelector).click();
    waitForElement(SHARABLE_PANEL_ACTION_BUTTON_DROPDOWN);
    saveBtn().click();
    expectSuccessNotif();
}

function headlineValueForHeadlineName(headlineName) {
    return element(contains(HEADLINE_VIZ, headlineName) + ' .bk-headline-value').html();
}

/**
 * A class for manipulation of DatePicker popups
 * @type {*}
 */
var datePickerPopup = angular.scenario.dsl('datePickerPopup', function () {
    return function (parentInputSelector) {
        var me = {};
        /**
         * opens up the popup associated with input specified by __parentInputSelector__. Will fail silently if there
         * is no date picker set on the input
         * @returns {*}
         */
        me.pop = function() {
            return this.addFutureAction('Opening date picker popup on input ' + parentInputSelector, function (appWindow, $document, done) {
                var $ = appWindow.$,
                    input = $($document.find(parentInputSelector));

                //click is needed to trigger our code that updates the initial date of the date picker. DatePicker does not
                //respond to click, it needs focus event
                $('body').click();
                input.click();
                input.focus();

                done();
            });
        };
        /**
         * clicks on the given date in the *currently selected* month in an *already open* popup
         * @param dayofMonth
         * @returns {*}
         */
        me.clickDayOfMonth = function (dayofMonth) {
            return this.addFutureAction('Selecting ' + dayofMonth + ' in date picker popup', function (appWindow, $document, done) {
                var $ = appWindow.$;
                var $popup = $($document.find(DATE_PICKER_POPUP));

                $popup.find("td.day").filter(function () {
                    //we have to ignore the greyed out date of the previous or next month(s)
                    return $(this).text().trim() == dayofMonth && !$(this).hasClass('new') && !$(this).hasClass('old');
                }).click();

                done(null, {});
            });
        };

        return me;
    };
});

var selectAllTableSources = angular.scenario.dsl('selectAllTableSources', function () {
    return function () {
        return this.addFutureAction('Selecting all table data sources', function (appWindow, $document, done) {
            // If there is an overlay with 'Add sources' popup, we should kill it by expanding the sources panel.
            appWindow.$('.bk-sage-data .bk-sources-container').mousedown();
            appWindow.$('.bk-sage-data .bk-sources-container .bk-manage-sources .bk-choose-sources-btn').click();
            // Navigate to all tab.
            appWindow.$('.bk-manage-sources .bk-sources-popover .left-pane .bk-filter')[0].click();

            var SELECT_ALL_CONTAINER = '.bk-manage-sources .bk-sources-popover .bk-list:contains(Tables) .bk-list-select-all',
                SELECT_ALL_CHECKBOX = SELECT_ALL_CONTAINER + ' .bk-checkbox';
            if (appWindow.$(SELECT_ALL_CHECKBOX).hasClass('bk-checked')) {
                done();
                return;
            }

            appWindow.$(SELECT_ALL_CHECKBOX).click();
            appWindow.$('.bk-sage-data .bk-sources-container .bk-manage-sources .bk-choose-sources-btn').click();
            done();
        });
    };
});

var selectAllWorksheetSources = angular.scenario.dsl('selectAllWorksheetSources', function () {
    return function () {
        return this.addFutureAction('Selecting all worksheet data sources', function (appWindow, $document, done) {
            // If there is an overlay with 'Add sources' popup, we should kill it by expanding the sources panel.
            appWindow.$('.bk-sage-data .bk-sources-container').mousedown();
            appWindow.$('.bk-sage-data .bk-sources-container .bk-manage-sources .bk-choose-sources-btn').click();
            var SELECT_ALL_CONTAINER = '.bk-manage-sources .bk-sources-popover .bk-list:contains(Worksheets) .bk-list-select-all',
                SELECT_ALL_CHECKBOX = SELECT_ALL_CONTAINER + ' .bk-checkbox';
            if (appWindow.$(SELECT_ALL_CHECKBOX).hasClass('bk-checked')) {
                done();
                return;
            }

            appWindow.$(SELECT_ALL_CHECKBOX).click();
            appWindow.$('.bk-sage-data .bk-sources-container .bk-manage-sources .bk-choose-sources-btn').click();
            done();
        });
    };
});

function selectSourcesByName(sourceNames, dontClearExisting) {
    element(DATA_SOURCE_OPEN_BTN).click();
    if (!dontClearExisting) {
        element(contains('.bk-sage-data .bk-data-scope .left-pane .bk-filter', 'All')).click();
    }

    var SELECT_ITEM_CONTAINER = '.bk-sage-data .bk-manage-sources .bk-list .bk-list-item';
    sourceNames.forEach(function (sourceName) {
        callFunctionWithElement(element(contains(SELECT_ITEM_CONTAINER, sourceName)), function ($selectItem) {
            var item = $selectItem.first();
            if (!item.find('.bk-checkbox').hasClass('bk-checked')) {
                item.click();
            }
        });
    });
    element(DATA_SOURCE_OPEN_BTN).click();
}

function selectImportedDataAsSources(userDataNames) {
    element(DATA_SOURCE_OPEN_BTN).click();
    element(contains('.bk-sage-data .bk-data-scope .left-pane .bk-filter', 'All')).click();
    var SELECT_ITEM_CONTAINER = '.bk-sage-data .bk-manage-sources .bk-list:contains(Imported Data) .bk-list-item';
    userDataNames.each(function (userData) {
        callFunctionWithElement(element(contains(SELECT_ITEM_CONTAINER, userData)), function ($selectItem) {
            if (!$selectItem.find('.bk-checkbox').hasClass('bk-checked')) {
                $selectItem.click();
            }
        });
    });
    element(DATA_SOURCE_OPEN_BTN).click();
}

function ensureFilterPanelIsOpened() {
    callFunctionWithElement(element('.bk-filters-container .bk-panel-component .bk-list'), function($el, window, $) {
        if ($el.is(':visible')) {
            return;
        }
        $('.bk-filters-container .bk-open-btn').click();
    });
}

var deselectAllTableSources = angular.scenario.dsl('deselectAllTableSources', function () {
    return function () {
        return this.addFutureAction('Deselecting all table data sources', function (appWindow, $document, done) {
            // This code relies on the fact that whenever we open the sources, select all is not checked in all conditions.
            var SELECT_ALL_CONTAINER = '.bk-manage-sources .bk-sources-popover .bk-list:contains(Tables) .bk-list-select-all .bk-checkbox';
            appWindow.$('.bk-sage-data .bk-sources-container .bk-manage-sources .bk-choose-sources-btn').click();
            appWindow.$(SELECT_ALL_CONTAINER).click();
            appWindow.$(SELECT_ALL_CONTAINER).click();
            appWindow.$('.bk-sage-data .bk-sources-container .bk-manage-sources .bk-choose-sources-btn').click();
            appWindow.$('.bk-action-confirmation-popup:contains(will clear your search) .bk-save-btn').click();
            done();
        });
    };
});

function clearVizDisplayPreference() {
    callFunctionWithElement(null, function($body, window, $){
        window.angular.element(window.document).injector().invoke(function(sessionService, util, blinkConstants){
            sessionService.setPreference(
                blinkConstants.ANSWER_DISPLAY_MODE_PREFERENCE_KEY,
                util.answerDisplayModes.CHART );
        });
    });
}

function deselectAllSources() {
    callFunctionWithElement(null, function($body, window, $){
        // Navigate to all tab.
        window.$('.bk-manage-sources .bk-sources-popover .left-pane .bk-filter')[0].click();
        var SELECT_ALL_CHECKBOX_SELECTOR = '.bk-manage-sources .bk-sources-popover .bk-select-all .bk-checkbox',
            $selectAllCheckBox = $body.find(SELECT_ALL_CHECKBOX_SELECTOR);

        $selectAllCheckBox.click();
        if ($selectAllCheckBox.is('.bk-checked')) {
            $selectAllCheckBox.click();
        }
    });

    waitFor(function(appWindow){
        return appWindow.$('.bk-sage-data-columns .bk-table-name').length === 0;
    }, 'waiting for all sources to be de-selected');

    // TODO(sunny): hack to prevent old sources from sticking, not sure why it is needed at this
    // point
    /* global sleep */
    sleep(1);
}

var JOIN_TYPE_SELECTOR = '.bk-with-join-type-selector',
    JOIN_TYPE_CHOICE = JOIN_TYPE_SELECTOR + ' .bk-form-radio';
function createSimpleWorksheet(params, doNotSave, accountForSageDelay) {
    dataTab().click();


    // Click create worksheet button
    waitForAndClickElement(ACTION_BUTTON_DROPDOWN);
    createNewWorksheetBtn().click();
    if (!!params.dataScope) {
        if (!!params.dataScope.importedData) {
            selectImportedDataAsSources(params.dataScope.importedData);
        }
    } else {
        selectAllTableSources();
    }


    if (params.sources) {
        params.sources.each(function (source) {
            element(DATA_COLUMN_SOURCE_ITEM + ' .bk-source-name:contains({1})'.assign(source)).click();
            element('.bk-sage-data-columns .bk-add-columns-btn').click();
            waitFor(function (appWindow) {
                if(!!accountForSageDelay) {
                    appWindow.$(DATA_COLUMN_SOURCE_ITEM + ' .bk-source-name:contains({1})'.assign(source)).click();
                    appWindow.$('.bk-sage-data-columns .bk-add-columns-btn').click();
                }
                return appWindow.$('.bk-worksheet-table .slick-group-title:contains({1})'.assign(source)).length;
            }, 'waiting for column to show up' , 500);
        });
    }

    if (params.switchJoinType) {
        element(contains(JOIN_TYPE_CHOICE, params.switchJoinType)).click();
        waitFor(function (appWindow) {
            return appWindow.$('.bk-loading-indicator-overlay:contains(Thinking):visible').length === 0;
        });
    }

    if (!doNotSave) {
        saveCurrentWorksheet(params.title);
    }
}

function getCurrentJoinTypeLabel() {
    return element(bkSelected(JOIN_TYPE_CHOICE)).text();
}

function createSavedAnswerBasedOnWorksheet(worksheetName, savedAnswerName, answerQuery) {
    goToAnswer();
    deselectAllTableSources();
    selectSourcesByName([worksheetName]);

    if (answerQuery === void 0) {
        answerQuery = 'revenue for customer region asia market segment';
    }

    waitForSageSuggestionToPassPredicate(answerQuery, function(appWindow){
        // subset of sage token can take longer to index hence we need to wait
        // for all tokens to be recognized
        return appWindow.$(visible('.bk-empty-page-placeholder')).length === 0
            && appWindow.$('.bk-qf-undefined-phrase').length === 0;
    }, 60000);

    clearAnswer();
    sageInputElement().enter(answerQuery);
    waitFor(function(appWindow){
        return appWindow.$(SHARABLE_PANEL_ACTION_BUTTON_DROPDOWN).length > 0;
    });
    waitForAnswerToLoad(answerQuery);

    saveCurrentAnswer(savedAnswerName);
}

function summarySelector(summaryRow) {
    return summaryRow + ' .bk-headline-aggregate.chosen-container';
}

function summaryLabel(summaryRow) {
    return element(summaryRow + ' .bk-headline-aggregate option:selected').text();
}

function summaryAnswer(summaryRow) {
    return element(summaryRow + ' .bk-headline-value').html();
}

function filterBody() {
    return '.bk-headline-filter-body';
}

function  filterOpRow() {
    return filterBody() + ' .bk-filter-op-row';
}

function filterOperandInput(headlineSelector, operandIndex) {
    return element(filterBody(headlineSelector) + nth(' .bk-filter-op-row', operandIndex) + ' input');
}

function pinVizBtn(parentViz) {
    return parentViz + ' .bk-pin-viz-btn';
}

// Looks for a chart viz element in the pinboard
function pinboardChartViz() {
    return PINBOARD + ' ' + CHART_VIZ;
}

// Looks for a table viz element in the pinboard
function pinboardTableViz() {
    return PINBOARD + ' .bk-viz-table';
}

// Viz context button of first table in pinboard
function pinboardVizContextBtn(vizSelector, visibleOnly) {
    var dropDownBtnSelector = [vizSelector, ACTION_BUTTON_DROPDOWN].join(' ');
    waitForAndClickElement(dropDownBtnSelector);
    var selector = '.bk-viz-context-btn';
    if (!!visibleOnly) {
        selector = visible(selector);
    }
    return selector;
}

function vizContextSaveBtn() {
    return element('.bk-viz-context .bk-save-btn');
}

function pinboardInPinboardDropDown(pinboardName) {
    return element('.bk-viz-pinner-modal .bk-pinboard-list li:contains(' + pinboardName + ')');
}

/* Filter */

function filterOption(filterSelector) {
    return filterSelector + ' .bk-cb-filter-content .bk-filter-option';
}

function childCheckbox(cssSelector) {
    return cssSelector + ' div.bk-checkbox';
}

function checkedElement(parentFilter, item) {
    return element(childCheckbox(contains(filterOption(parentFilter), item)) + '.bk-checked');
}

function waitForFilterDataToLoad (selector) {
    return waitFor(function (appWindow) {
        return appWindow.$(selector + ' .bk-headline-filter .bk-headline-filter-header.bk-unfolded').length > 0;
    });
}

function waitForCheckboxFilterToLoad(colName, aggr) {
    waitForElement(sageDataFilterCBContentSelector({
        colName: colName,
        aggr: aggr
    }), 'waiting for CB filter data for column ' + colName);
}

function waitForDateFilterToLoad(colName) {
    waitForElement(contains('.bk-sage-data-filter-container .bk-viz-filter', colName),
        'waiting for date filter for column ' + colName);
}

/**
 * returns true if the given DOM element is fully visible in the current viewport of its parent window
 * @param {DOMElement} el
 * @returns {boolean}
 */
function isDOMElementInViewPort (el) {
    var doc = el.ownerDocument,
        win = doc.defaultView,
        rect = el.getBoundingClientRect();
    return (
        rect.top >= 0 &&
            rect.left >= 0 &&
            rect.bottom <= doc.documentElement.clientHeight &&
            rect.right <= doc.documentElement.clientWidth
    );
}

/**
 * resolves to true if the give angular.element is fully visible in the current viewport of its parent window
 * @param el angular.element instance
 * @returns {*}
 */
function isElementInViewPort(el) {
    return el.query(function(e, done){
        done(null, isDOMElementInViewPort(e[0]));
    });
}

/**
 * waits for the first DOM element specified by the selector to become visible in the current viewport of its parent
 * window (typically after a scrollIntoView has been called)
 * @param {string} selector
 * @returns {*}
 */
function waitForElementToBeInViewPort(selector) {
    return waitFor(function (appWindow) {
        return isDOMElementInViewPort(appWindow.$(selector)[0]);
    }, 'waiting for element to scroll into view port ' + selector);
}


function getSelectorInVizContext(selector) {
    return VIZ_CONTEXT + ' ' + selector;
}

function getLabelsSortedByPositionForAxis($axis, jQ) {
    var $labels = $axis.find('text'),
        xAxis = X_AXIS_REGEX.test($axis.attr('class'));

    var $sortedLabels = $labels.sort(function(label1, label2){
        var sortAttribute = xAxis ? 'x' : 'y',
            position1 = parseFloat(jQ(label1).attr(sortAttribute)),
            position2 = parseFloat(jQ(label2).attr(sortAttribute));

        //y-axis origin is at top
        if (xAxis) {
            return position1 - position2;
        }
        return position2 - position1;
    });

    return $sortedLabels.map(function(index, tspan) {
        return jQ(tspan).text();
    });
}

function getSortedAxisLabels(axisSelector, callback) {
    return callFunctionWithElement(element(axisSelector), function($axis, window, jQ) {
        return callback(getLabelsSortedByPositionForAxis($axis, jQ));
    });
}

function isChartTypeButtonEnabled(chartTypeSelector) {
    var el = element(chartTypeSelector);
    return callFunctionWithElement(el, function($e, window, $){
        return !$e.closest('.bk-viz-icon-wrapper .bk-viz-icon-button').hasClass('bk-disabled-button');
    });
}

function queryAndWaitForChart (query, ignoreExplicitPathCheck) {
    waitForSageBar();
    sageInputElement().enter(query);
    if (!!ignoreExplicitPathCheck) {
        waitForAnswerToChange();
    } else {
        waitForAnswerToLoad(query);
    }
    waitForChartAnswerVisualizationMode();
}

function queryAndWaitForHeadline (query) {
    sageInputElement().enter(query);
    waitForAnswerToLoad(query);
    waitForTableAnswerVisualizationMode();
}

function queryAndWaitForTable (query, ignoreExplicitPathCheck) {
    sageInputElement().enter(query);
    if (!!ignoreExplicitPathCheck) {
        waitForAnswerToChange();
    } else {
        waitForAnswerToLoad(query);
    }
    waitForTableAnswerVisualizationMode();
}

/**
 * Logins a user. It assumes that we are on  the login screen
 */
function login(username, password) {
    waitForElement(LOGIN_FORM, 'login page');
    input('user.username').enter(username);
    input('password').enter(password);
    element('.bk-login-section .bk-login-btn').click();
    waitForElement(HOME_TAB);
    goToAnswer();
    waitForElement(SAGE_DATA_PANEL, 'waiting for sage data panel');
    selectAllTableSources();
}

/**
 * Logouts a user. It assumes that we have the logout element present
 */
function logout() {
    element('.bk-primary-nav .bk-user-menu .bk-sign-out').click();
    waitForElement(LOGIN_FORM, 'login page');
}

/**
 * Logouts and logins for the given username and password
 */
function reLogin(username, password) {
    logout();
    login(username, password);
}

function isIE() {
    var ua = window.navigator.userAgent;
    return !!ua.match(/MSIE/) || !!ua.match(/Trident/);
}

var addRequestTransformer = angular.scenario.dsl('addRequestTransformer', function () {
    return function (transformFn) {
        return this.addFutureAction('Add success response transformer', function (appWindow, $document, done) {
            var $rootScope = appWindow.$('body').scope().$root;
            $rootScope.requestInterceptorFactory.addRequestTransformer(transformFn);
            done();
        });
    };
});

var addSuccessResponseTransformer = angular.scenario.dsl('addSuccessResponseTransformer', function () {
    return function (transformFn) {
        return this.addFutureAction('Add success response transformer', function (appWindow, $document, done) {
            var $rootScope = appWindow.$('body').scope().$root;
            $rootScope.responseInterceptorFactory.addSuccessTransformer(transformFn);
            done();
        });
    };
});

var resetResponseTransformers = angular.scenario.dsl('resetResponseTransformers', function () {
    return function() {
        return this.addFutureAction('Reset response transformer', function (appWindow, $document, done) {
            var $rootScope = appWindow.$('body').scope().$root;
            $rootScope.responseInterceptorFactory.resetTransformers();
            done();
        });
    };
});

var resetRequestTransformers = angular.scenario.dsl('resetRequestTransformers', function () {
    return function() {
        return this.addFutureAction('Reset request transformer', function (appWindow, $document, done) {
            var $rootScope = appWindow.$('body').scope().$root;
            $rootScope.requestInterceptorFactory.resetTransformers();
            done();
        });
    };
});

var goBackInHistory = angular.scenario.dsl('goBackInHistory', function () {
    return function () {
        return this.addFutureAction('Going back in history', function (appWindow, $document, done) {
            appWindow.history.back();
            done();
        });
    };
});

var goForwardInHistory = angular.scenario.dsl('goForwardInHistory', function () {
    return function () {
        return this.addFutureAction('Going forward in history', function (appWindow, $document, done) {
            appWindow.history.forward();
            done();
        });
    };
});

function headlineAggregationSelectorSelector(headlineName) {
    return contains(HEADLINE_VIZ, headlineName) + ' select';
}

function getHeadlineAggregation(headlineName) {
    return callFunctionWithElement(element(contains(HEADLINE_VIZ, headlineName)), function($el) {
        return $el.find('.chosen-single').text();
    });
}

function selectHeadlineAggregation (headlineName, aggregationName) {
    selectChosenOption(headlineAggregationSelectorSelector(headlineName), aggregationName);
}

function updateBlinkContentEditable(selector, value) {
    callFunctionWithElement(element(selector), function($el, window, $){
        $el.find('.bk-editable-input').click();
        var $input = $el.find('input');
        $input.focus();
        $input.val(value);
        $input.trigger('input');
        $input.trigger('blur');
    });
    // empty event loop to allow content editable to update
    callFunctionWithElement(null, angular.noop);
}

var UI_SELECT_SEARCH_SELECTOR = '.ui-select-search';
var UI_SELECT_ROW_SELECTOR = '.ui-select-choices-row';
var UI_SELECT_MATCH_ITEM_SELECTOR = '.ui-select-match-item';
var UI_SELECT_REMOVE_SELECTED = '.ui-select-match-close';

var chartFunctions = (function(){
    var COLUMN_CONTROL = '.column-control',
        METRICS_CONTROL_OPTION = '.bk-metrics',
        PRESENTATION_MODE_CONTAINER = '.bk-presentation-mode-container',
        VISIBLE_CHART_SERIES = ' .highcharts-series[visibility="visible"]',
        VISIBLE_MENU_ARROW = '.bk-icon-arrow-down:not(.ng-hide)',
        LEGEND_SINGULAR_SELECTOR = '.bk-legend-singular-select',
        LEGEND_SINGULAR_SELECTION_CLASS = 'bk-legend-singular-select-selected',
        SHOW_DATA_LABEL_CHECKED = '.bk-show-data-label-checkbox .bk-checkbox-container .bk-checkbox.bk-checked',
        X_AXIS_TITLE = '.highcharts-xaxis-title',
        Y_AXIS_TITLE = '.highcharts-yaxis-title',
        SHOW_DATA_LABEL = '.bk-show-data-label-checkbox .bk-checkbox-container .bk-checkbox',
        AXIS_SELECTOR = '.bk-chart-axes-selectors .bk-chart-axis-selector',
        X_AXIS_SELECTOR = contains(AXIS_SELECTOR, 'X-Axis'),
        X_AXIS_SELECTOR_INPUT = X_AXIS_SELECTOR + ' ' + UI_SELECT_SEARCH_SELECTOR,
        X_AXIS_SELECTOR_VALUE = X_AXIS_SELECTOR + ' ' + UI_SELECT_ROW_SELECTOR,
        X_AXIS_SELECTED_COLUMNS = X_AXIS_SELECTOR + ' ' + UI_SELECT_MATCH_ITEM_SELECTOR,
        Y_AXIS_SELECTOR = contains(AXIS_SELECTOR, 'Y-Axis'),
        Y_AXIS_SELECTOR_INPUT = Y_AXIS_SELECTOR + ' ' + UI_SELECT_SEARCH_SELECTOR,
        Y_AXIS_SELECTOR_VALUE = Y_AXIS_SELECTOR + ' ' + UI_SELECT_ROW_SELECTOR,
        Y_AXIS_SELECTED_COLUMNS = Y_AXIS_SELECTOR + ' ' + UI_SELECT_MATCH_ITEM_SELECTOR,
        LEGEND_AXIS_SELECTOR = contains(AXIS_SELECTOR, 'Legend'),
        LEGEND_AXIS_SELECTOR_INPUT = LEGEND_AXIS_SELECTOR + ' ' + UI_SELECT_SEARCH_SELECTOR,
        LEGEND_AXIS_SELECTOR_VALUE = LEGEND_AXIS_SELECTOR + ' ' + UI_SELECT_ROW_SELECTOR,
        LEGEND_AXIS_SELECTED_COLUMNS = LEGEND_AXIS_SELECTOR + ' ' + UI_SELECT_MATCH_ITEM_SELECTOR,
        SORT_INDICATOR = '.bk-axis-label .bk-sort-indicator:not(.ng-hide)',
        X_AXIS_MENU_ARROW =  X_AXIS_TITLE + ' .bk-axis-label '+VISIBLE_MENU_ARROW,
        Y_AXIS_MENU_ARROW =  Y_AXIS_TITLE + ' .bk-axis-label '+VISIBLE_MENU_ARROW;

    return {

        getXAxisDropdown: function() {
            return element(X_AXIS_MENU_ARROW);
        },
        getYAxisDropdown: function() {
            return element(Y_AXIS_MENU_ARROW);
        },

        waitForShowDataLabelsChecked: function () {
            waitForElement(SHOW_DATA_LABEL_CHECKED, 'waiting for the show data label checkbox to be checked.');
        },
        waitForShowDataLabelsUnChecked: function () {
            waitForElementCountToBe(SHOW_DATA_LABEL_CHECKED, 0);
        },
        uncheckDataLabels: function () {
            if(element(SHOW_DATA_LABEL_CHECKED).count() === 0) {
                return;
            }
            callFunctionWithElement(element(SHOW_DATA_LABEL), function($el) {
                return $el.parent().click();
            });
        },
        getFirstYAxisMaxValue: function () {
            var firstYAxisSelector = second(HIGHCHARTS_AXIS_LABELS);
            return getSortedAxisLabels(firstYAxisSelector, function(labels){
                return labels[labels.length - 1];
            });
        },
        getXAxisMaxValue: function () {
            var xAxisSelector = first(HIGHCHARTS_AXIS_LABELS);
            return getSortedAxisLabels(xAxisSelector, function(labels){
                return labels[labels.length - 1];
            });
        },
        allXAxisLabelsAreSorted: function (descending) {
            var xAxisSelector = first(HIGHCHARTS_AXIS_LABELS);

            return getSortedAxisLabels(xAxisSelector, function(labels){
                if (!isNaN(parseFloat(labels[0]))) {
                    for (var j=0; j<labels.length; j++) {
                        labels[j] = parseFloat(labels[j]);
                    }
                }
                for (var i=1; i<labels.length; i++) {
                    if (!!descending && labels[i] > labels[i - 1]) {
                        return false;
                    }
                    if (!descending && labels[i] < labels[i - 1]) {
                        return false;
                    }
                }
                return true;
            });
        },
        getXAxisMinValue: function () {
            var xAxisSelector = first(HIGHCHARTS_AXIS_LABELS);
            return getSortedAxisLabels(xAxisSelector, function(labels){
                return labels[0];
            });
        },
        getXAxisNthValue: function (n) {
            var xAxisSelector = first(HIGHCHARTS_AXIS_LABELS);
            return getSortedAxisLabels(xAxisSelector, function(labels){
                return labels[n];
            });
        },
        getXAxisTitle: function (title) {
            return callFunctionWithElement(null, function($el, window, $) {
                return $(X_AXIS_TITLE).text().
                    replace(/(\r\n|\n|\r)/gm, ' ').
                    replace(/\s+/g, ' ').
                    trim();
            });
        },
        getYAxisMinValue: function () {
            var yAxisSelector = first(HIGHCHARTS_YAXIS_LABELS);
            return getSortedAxisLabels(yAxisSelector, function(labels){
                return labels[0];
            });
        },
        getYAxisMaxValue: function () {
            var yAxisSelector = first(HIGHCHARTS_YAXIS_LABELS);
            return getSortedAxisLabels(yAxisSelector, function(labels){
                return labels[labels.length - 1];
            });
        },
        getSecondYAxisMinValue: function () {
            var yAxisSelector = second(HIGHCHARTS_YAXIS_LABELS);
            return getSortedAxisLabels(yAxisSelector, function(labels){
                return labels[0];
            });
        },
        getSecondYAxisMaxValue: function () {
            var yAxisSelector = second(HIGHCHARTS_YAXIS_LABELS);
            return getSortedAxisLabels(yAxisSelector, function(labels){
                return labels[labels.length - 1];
            });
        },
        openYAxisControl: function (axisIndex) {
            element(nth(CHART_VIZ + ' ' + CHART_Y_AXIS_LABEL_CONTROL, axisIndex + 1)).click();
        },
        openMetricsColumnControl: function () {
            // must open the correct control menu before calling this function
            element(COLUMN_CONTROL + ' ' + METRICS_CONTROL_OPTION).click();
        },
        clickToGetDrillOptions: function () {
            // Click the column chart icon.
            selectChartType(CHART_TYPE_COLUMN);

            drillClickOnColumn(CHART_VIZ, 0);

            // Click on drill sub-menu
            element(DROPDOWN_SUBMENU_OPTION).click();
            // Wait for any option to appear
            waitForElement(DROPDOWN_ITEM, 'waiting for atleast one item in dropdown');
        },
        presentationModeNavigateNext: function () {
            callFunctionWithElement(null, function($body, appWindow, jQ){
                jQ(PRESENTATION_MODE_CONTAINER)
                    .focus()
                    .trigger(jQ.Event('keydown', {which: jQ.ui.keyCode.DOWN}));
            });
            // wait for transition to finish
            sleep(1);
        },
        presentationModeNavigatePrevious: function () {
            callFunctionWithElement(null, function($body, appWindow, jQ){
                jQ(PRESENTATION_MODE_CONTAINER)
                    .focus()
                    .trigger(jQ.Event('keydown', {which: jQ.ui.keyCode.UP}));
            });
            // wait for transition to finish
            sleep(1);
        },
        initWithTableAndNavigateToChartType: function (query, chartType) {
            if (!query) {
                return;
            }
            queryAndWaitForTable(query);
            navigateToChartViewFromTable();
            selectChartType(chartType);
            waitForHighcharts();
            openEditorTool();
        },
        setSingularLegendSelection: function (legendLabel, deselect) {
            deselect = !!deselect;

            callFunctionWithElement(null, function($body, appWindow, jQ){
                var legendItem = jQ(chartLegendItemSelector(legendLabel));
                var singularSelector = legendItem.find(LEGEND_SINGULAR_SELECTOR);
                var isAlreadySelected = singularSelector.hasClass(LEGEND_SINGULAR_SELECTION_CLASS);
                if (deselect === isAlreadySelected) {
                    singularSelector.click();
                }
            });
        },
        getVisibleSeries: function () {
            return element(CHART_VIZ + ' ' + VISIBLE_CHART_SERIES);
        },
        selectXAxisColumn: function (name) {
            waitForAndClickElement(X_AXIS_SELECTOR_INPUT);
            waitForAndClickElement(contains(X_AXIS_SELECTOR_VALUE, name));
        },
        selectYAxisColumn: function (name) {
            waitForAndClickElement(Y_AXIS_SELECTOR_INPUT);
            waitForAndClickElement(contains(Y_AXIS_SELECTOR_VALUE, name));
        },
        selectLegendColumn: function (name) {
            waitForAndClickElement(LEGEND_AXIS_SELECTOR_INPUT);
            waitForAndClickElement(contains(LEGEND_AXIS_SELECTOR_VALUE, name));
        },
        matchXAxisColumns: function(names) {
            return callFunctionWithElement(null, function($e, window, $){
                var columns = $(X_AXIS_SELECTED_COLUMNS);
                if (columns.length != names.length) {
                    return false;
                }
                var allMatched = true;
                names.forEach(function(name, index) {
                    if (name != columns[index].innerText.trim()) {
                        allMatched = false;
                    }
                });
                return allMatched;
            });
        },
        removeXAxisColumn: function(name) {
            callFunctionWithElement(null, function($e, window, $){
                $(contains(X_AXIS_SELECTED_COLUMNS, name) + ' ' + UI_SELECT_REMOVE_SELECTED).
                    click();
            });
        },
        matchYAxisColumns: function(names) {
            return callFunctionWithElement(null, function($e, window, $){
                var columns = $(Y_AXIS_SELECTED_COLUMNS);
                if (columns.length != names.length) {
                    return false;
                }
                var allMatched = true;
                names.forEach(function(name, index) {
                    if (name != columns[index].innerText.trim()) {
                        allMatched = false;
                    }
                });
                return allMatched;
            });
        },
        removeYAxisColumn: function(name) {
            callFunctionWithElement(null, function($e, window, $){
                $(contains(Y_AXIS_SELECTED_COLUMNS, name) + ' ' + UI_SELECT_REMOVE_SELECTED).
                    click();
            });
        },
        matchLegendColumns: function(names) {
            return callFunctionWithElement(null, function($e, window, $){
                var columns = $(LEGEND_AXIS_SELECTED_COLUMNS);
                if (columns.length != names.length) {
                    return false;
                }
                var allMatched = true;
                names.forEach(function(name, index) {
                    if (name != columns[index].innerText.trim()) {
                        allMatched = false;
                    }
                });
                return allMatched;
            });
        },
        removeLegendColumn: function(name) {
            callFunctionWithElement(null, function($e, window, $){
                $(contains(LEGEND_AXIS_SELECTED_COLUMNS, name) + ' ' + UI_SELECT_REMOVE_SELECTED).
                    click();
            });
        },
        waitForNthAxisTitle: function(n, title) {
            waitForElementText(nth(HIGHCHARTS_AXIS, n) + ' ' + HIGHCHARTS_AXIS_TITLE, title);
        },
        waitForNthAxisTitleDetail: function(n, detail) {
            waitForElementText(nth(HIGHCHARTS_AXIS, n) + ' i', detail);
        }
    };
})();

var uploadFile = function (fileName, fileContent, type) {
    /* global File */
    var file = new File([fileContent], fileName, {type: type});

    return callFunctionWithElement(element('#bk-file-input'), function($fileInput){
        var fileInputDomNode = $fileInput[0];
        fileInputDomNode.files.item = function () {
            return file;
        };
        $fileInput.trigger('change');
        //trigger 'change' causes problems for subsequent futures as it triggers a scope.$apply cycle
        //making the tests flaky injecting a noop future allows the cycle to finish
        element('body').count();
    });
};

var userDataUploadFunctions = (function(){
    return {
        deleteMockCSV: function (csvFileName) {
            dataTab().click();
            deleteMetadataListItems([csvFileName], true);
        },
        mockUploadFile: function (fileName, fileContent) {
            uploadFile(fileName, fileContent, 'text/csv');
        },
        setHeaderDefined: function (defined) {
            input('uploadStep.headerDefined').select(defined ? "yes" : "no");
        },
        setColumnSeparator: function(separator) {
            element('#' + separator + '.bk-upload-question-choice').click();
        },
        clickBack: function () {
            element('.bk-secondary-button.bk-button-body .bk-text:contains(Back)').click();
        },
        clickNext: function () {
            element('.bk-wizard-btn-group .bk-next-button').click();
        },
        clickCancel: function () {
            element('.bk-wizard-btn-group .bk-cancel-button').click();
        },
        clickImportButton: function () {
            element('.bk-wizard-btn-group .bk-finish-button').click();
        },
        uploadCSV: function (csvFileName, header, rows, deleteExisting) {
            if (deleteExisting) {
                this.deleteMockCSV(csvFileName);
            }
            clickImportDataButton();

            var data = !!header ? [header] : [];
            data = data.concat(rows);

            var fileName = csvFileName;
            if (!/[.]csv$/.test(fileName)) {
                fileName += '.csv';
            }

            this.mockUploadFile(fileName, data.join('\n'));
            this.setHeaderDefined(!!header);
            this.clickNext();
            this.clickNext();
            this.clickImportButton();
            dataTab().click();
        }
    };
})();

var sqlUploadFunctions = (function(){
    return {
        mockUploadFile: function (fileName, fileContent) {
            uploadFile(fileName, fileContent, 'text/sql');
        },
        clickReset: function () {
            element('.create-schema .right-btns .reset-btn').click();
        },
        clickExecute: function () {
            element('.create-schema .right-btns .bk-btn-blue').click();
        },
        clickImportButton: function () {
            element('.bk-file-upload-btn').click();
        },
        uploadSQL: function (sqlFileName, rows) {
            this.clickImportButton();

            var data = [];
            data = data.concat(rows);

            var fileName = sqlFileName;
            if (!/[.]sql$/.test(fileName)) {
                fileName += '.sql';
            }

            this.mockUploadFile(fileName, data.join('\n'));
        }
    };
})();

function goToImportSchema() {
    dataTab().click();
    element(ACTION_BUTTON_DROPDOWN).click();
    importSchemaBtn().click();
}

function uploadAndExecuteSQL(fileName, commands) {
    goToImportSchema();
    sqlUploadFunctions.uploadSQL(fileName, commands);
    sqlUploadFunctions.clickExecute();
}

var formulaFunctions = (function(){
    var FORMULA_EDITOR = '.content-editor',
        SUGGESTIONS_MENU = '.bk-expression-suggestions-menu';

    return {
        selectors: {
            FORMULA_EDITOR: FORMULA_EDITOR,
            PLACEHOLDER: FORMULA_EDITOR + ' .placeholder',
            SUGGESTION_NAMES: SUGGESTIONS_MENU + ' .suggestion .suggestion-name',
            CONFIRMATION_BUTTON: '.bk-editor-footer .bk-confirm-btn',
            CANCEL_BUTTON: '.bk-editor-footer .bk-formula-edit-cancel',
            FORMULA_LIST_ITEM: '.bk-formula-list-item div',
            FORMULA_NAME_EDITOR: '.bk-formula-editor .bk-formula-name',
            FORMULA_TYPE_SELECTOR: '.bk-measure-attribute-selector select',
            FORMULA_TYPE_SELECTED_OPTION: '.bk-measure-attribute-selector .chosen-single',
            VALIDATION_SUCCESS_ICON: '.bk-validation-icons .bk-icon.bk-success-icon',
            VALIDATION_ERROR_ICON: '.bk-validation-icons .bk-icon.bk-error-icon',
            ADD_FORMULA_BUTTON: '.bk-formulae-container .header-add-button',
            FORMULA_DROPDOWN: '.expression-editor-context-menu',
            FORMULA_DROPDOWN_ITEM: '.expression-editor-context-menu .items li',
            FORMULA_DROPDOWN_ERROR: '.expression-editor-context-menu .header-text .header-text-error:contains(I didn\'t get that)',
            GHOST_TOKEN : '.ghost.token',
            EDITOR_CONTENT_WITH_WHITESPACES : '.token:not(.ghost):not(.ghost-separator):not(.empty)',
            ADD_FORMULA_IN_ANSWER : '.bk-add-formula'
        },
        checkIfHighlightedElementMovesWhenUsingKeyboard: function() {
            return callFunctionWithElement(null, function($body, window, $) {

                return true;
            });
        },
        expandFormulaSourceInAnswer: function () {
            element(LEFT_PANEL_FORMULA_LIST + ' .bk-source-header').click();
        },
        openFormulaEditorInWorksheet: function () {
            waitForElementToShow(this.selectors.ADD_FORMULA_BUTTON);
            element(this.selectors.ADD_FORMULA_BUTTON).click();
        },
        openFormulaEditorInAnswer: function() {
            waitForAndClickElement(ACTION_BUTTON_DROPDOWN);
            element(this.selectors.ADD_FORMULA_IN_ANSWER).click();
        },
        openExistingFormulaInWorksheet: function (formulaName) {
            element(contains(this.selectors.FORMULA_LIST_ITEM, formulaName)).click();
        },
        openExistingFormulaInAnswer: function (formulaName) {
            var formulaColSelector = contains(LEFT_PANEL_FORMULA_LIST + ' .bk-columns-list li', formulaName.toLowerCase());
            element(formulaColSelector + ' .bk-style-icon-edit').click();
        },
        expectFormulaCountInWorksheet: function(num) {
            waitForElementCountToBe(this.selectors.FORMULA_LIST_ITEM, num);
        },
        deleteFormulaInAnswer: function(formulaName) {
            var formulaColSelector = contains(LEFT_PANEL_FORMULA_LIST + ' .bk-columns-list li', formulaName.toLowerCase());
            element(formulaColSelector + ' .bk-style-icon-x').click();
        },
        focusFormulaEditor: function () {
            callFunctionWithElement(element(this.selectors.FORMULA_EDITOR), function($e, window, $){
                $e.focus();
            });
        },
        typeInFormulaEditor: function (text) {
            callFunctionWithElement(element(this.selectors.FORMULA_EDITOR), function($e, window, $){
                $e.html($e.html() + text);
                $e.trigger("input");
            });
            // this ensures that we got backend response
            callFunctionWithElement(element(this.selectors.FORMULA_EDITOR), function($e, window, $){
                var nodes = $e.contents(formulaFunctions.EDITOR_CONTENT_WITH_WHITESPACES);
                setCursorInNode(window, nodes.last(), nodes.last()[0].childNodes[0].length);
                console.log('moved');
                $e.trigger('input');
            });
        },
        clearFormulaEditor: function () {
            callFunctionWithElement(element(this.selectors.FORMULA_EDITOR), function($e, window, $){
                $e.html('');
                $e.trigger("input");
            });
        },
        waitForFormulaEditor: function () {
            waitForElement(this.selectors.FORMULA_EDITOR, 'wait for formula editor');
        },
        waitForFormulaToResolve: function () {
            var self = this;
            waitFor(function(appWindow){
                return appWindow.$(self.selectors.VALIDATION_SUCCESS_ICON).length > 0;
            }, 'waiting for current formula to resolve');
        },
        waitForFormulaToResolveToError: function () {
            var self = this;
            waitFor(function(appWindow){
                return appWindow.$(self.selectors.VALIDATION_ERROR_ICON).length > 0;
            }, 'waiting for current formula to resolve to error');
        },
        expectFormulaTextToMatch: function (expectedFormulaRegex) {
            return callFunctionWithElement(null, function($e, window, $) {
                // need to replace non-breaking whitespaces with regular whitespaces for
                // ease of comparison
                expectedFormulaRegex.match($(FORMULA_EDITOR).text().replace(/\W/g, ' '));
            });
        },
        saveCurrentFormula: function (formulaName) {
            updateBlinkContentEditable(this.selectors.FORMULA_NAME_EDITOR, formulaName);
            var self = this;
            waitFor(function(appWindow){
                return !appWindow.$(self.selectors.CONFIRMATION_BUTTON).hasClass('bk-btn-disabled');
            });
            element(this.selectors.CONFIRMATION_BUTTON).click();
        },
        closePopup: function () {
            element(this.selectors.CANCEL_BUTTON).click();
        },
        getCurrentFormulaType: function () {
            return element(this.selectors.FORMULA_TYPE_SELECTED_OPTION).text();
        },
        changeCurrentFormulaType: function (newType) {
            return selectChosenOption(this.selectors.FORMULA_TYPE_SELECTOR, newType);
        },
        waitForCurrentFormulaTypeToBe: function(expectedType) {
            var selector = this.selectors.FORMULA_TYPE_SELECTED_OPTION;
            waitFor(function(appWindow){
                return appWindow.$(selector).text() === expectedType;
            }, 'waiting for formula type to be: ' + expectedType);
        },
        createAndSaveNewFormulaInWorksheet: function (formulaText, formulaName) {
            this.openFormulaEditorInWorksheet();
            this.focusFormulaEditor();
            this.typeInFormulaEditor(formulaText);
            this.waitForFormulaToResolve();
            this.saveCurrentFormula(formulaName);
        },
        createAndSaveNewFormulaInAnswer: function (formulaText, formulaName) {
            this.openFormulaEditorInAnswer();
            this.focusFormulaEditor();
            this.typeInFormulaEditor(formulaText);
            this.waitForFormulaToResolve();
            this.saveCurrentFormula(formulaName);
        },
        waitForGhostToken: function(){
            waitForElement(this.selectors.GHOST_TOKEN);
        },
        waitForFormulaText: function(expectedText){
            var self = this;
            waitFor(function(appWindow){
                return appWindow.$(self.selectors.FORMULA_EDITOR).text().replace(/\u00a0/g, ' ').trim() == expectedText;
            }, 'wait for formula editor text to be');
        },
        waitForSuggestions: function(firstSuggestion) {
            waitFor(function(win){
                return win.$(formulaFunctions.selectors.SUGGESTION_NAMES).eq(0).text() === firstSuggestion;
            });
        }
    };
})();

var colorPickerFunctions = (function(){
    var COLOR_PICKER_ANCHOR = '.bk-color-picker-anchor';

    function setColor(pickerSelector, color) {
        element(pickerSelector).click();
        callFunctionWithElement(element(pickerSelector + ' ' + COLOR_PICKER_ANCHOR), function($el, appWindow, jQuery){
            jQuery($el).colorpicker('setValue', color).colorpicker('hide');
        });
    }

    function getColor(pickerSelector) {
        return element(pickerSelector).css('background-color');
    }

    return {
        setColor: setColor,
        getColor: getColor
    };
})();

var tableColumnMenuFunctions = (function(){
    var METRICS_TAB_BODY = '.bk-table-column-menu-metrics-content';

    function getTableColumnHeaderMenu(columnName) {
        return '{1}:contains("{2}") {3}'.assign(TABLE_HEADER_COLUMN, columnName, TABLE_HEADER_MENU_BUTTON);
    }

    function getTabHeaderItem(tabName, parentSelector) {
        parentSelector = parentSelector || '';
        return '{1} {2} {3}:contains("{4}")'.assign(
            parentSelector,
            TABLE_COLUMN_MENU,
            TAB_HEADER_ITEM,
            tabName
        );
    }

    function getFilterTabHeader(parentSelector) {
        return getTabHeaderItem('Filters', parentSelector);
    }

    function getMetricTabHeader(parentSelector) {
        return getTabHeaderItem('Conditional Formatting', parentSelector);
    }

    return {
        openTableColumnHeaderMenu: function (columnName) {
            element(getTableColumnHeaderMenu(columnName)).click();
        },
        selectMetricsTab: function () {
            waitForElement(getMetricTabHeader());
            element(getMetricTabHeader()).click();
            waitForElement(METRICS_TAB_BODY);
        },
        getTableColumnHeaderMenuSelector: getTableColumnHeaderMenu
    };
})();

var metricsMenuFunctions = (function(){

    var METRICS_WIDGET = '.bk-column-metrics-widget',
        ADD_METRIC_BUTTON = '.bk-column-metric-add .bk-icon',
        METRIC_ROW = '.bk-column-metric',
        METRIC_RANGE_MIN = '.bk-numeric-metric-value-min input',
        METRIC_RANGE_MAX = '.bk-numeric-metric-value-max input',
        COLOR_PICKER = '.bk-metric-color-picker',
        COLOR_PICKER_FILL = '.bk-color-picker-fill';

    return {
        getMetricsCount: function () {
            return element(METRICS_WIDGET + ' ' + METRIC_ROW).count();
        },
        getMetricMin: function (metricIndex) {
            return blinkInput(nth(METRIC_ROW, metricIndex + 1) + ' ' + METRIC_RANGE_MIN).val();
        },
        getMetricMax: function (metricIndex) {
            return blinkInput(nth(METRIC_ROW, metricIndex + 1) + ' ' + METRIC_RANGE_MAX).val();
        },
        getMetricColor: function (metricIndex) {
            var selector = nth(METRICS_WIDGET + ' ' + COLOR_PICKER, metricIndex + 1) + ' ' + COLOR_PICKER_FILL;
            return colorPickerFunctions.getColor(selector);
        },
        addEmptyMetric: function () {
            element(METRICS_WIDGET + ' ' + ADD_METRIC_BUTTON).click();
        },
        addNewMetric: function (rangeMin, rangeMax, color) {
            element(METRICS_WIDGET + ' ' + ADD_METRIC_BUTTON).click();
            blinkInput(last(METRIC_ROW) + ' ' + METRIC_RANGE_MIN).enter(rangeMin);
            blinkInput(last(METRIC_ROW) + ' ' + METRIC_RANGE_MAX).enter(rangeMax);
            colorPickerFunctions.setColor(last(METRICS_WIDGET + ' ' + COLOR_PICKER), color);
        },
        applyMetrics: function () {
            element(METRICS_WIDGET + ' ' + DIALOG_OK_BUTTON).click();
        },
        cancel: function () {
            element(METRICS_WIDGET + ' ' + DIALOG_CANCEL_BUTTON).click();
        }
    };
})();

var filterFunctions = (function(){
    var rangeFilters = (function(){
        var FIRST_OPERAND = 'rangeDefinition.firstOperand';
        var SECOND_OPERAND = 'rangeDefinition.secondOperand';
        var PREDICATE_SELECT = 'select.bk-op-selector';
        var FIRST_PREDICATE_SELECT = first(PREDICATE_SELECT);
        var SECOND_PREDICATE_SELECT = second(PREDICATE_SELECT);

        return {
            clearRangeFilterFirstPredicate: function () {
                input(FIRST_OPERAND).enter('');
            },
            expectRangeFilterFirstOperandValue: function (value) {
                expect(input(FIRST_OPERAND).val()).toBe(value);
            },
            expectRangeFilterSecondOperandValue: function (value) {
                expect(input(SECOND_OPERAND).val()).toBe(value);
            },
            expectRangeFilterSecondOperandOptions: function (options) {
                expect(validateChosenOptions(SECOND_PREDICATE_SELECT, options)).toBe(true);
            },
            changeRangeFilterFirstPredicate: function (predicateType, value) {
                if (!!predicateType) {
                    selectChosenOption(FIRST_PREDICATE_SELECT, predicateType);
                }
                if (!!value) {
                    input(FIRST_OPERAND).enter(value);
                }
            },
            changeRangeFilterSecondPredicate: function (predicateType, value) {
                if (!!predicateType) {
                    selectChosenOption(SECOND_PREDICATE_SELECT, predicateType);
                }
                if (!!value) {
                    input(SECOND_OPERAND).enter(value);
                }
            },
            waitForFilterToLoad: function() {
                waitForElementCountToBe(FIRST_PREDICATE_SELECT, 1);
            }
        };
    })();

    var dateFilters = (function(){
        var FIRST_INPUT_SELECTOR = first('select.bk-op-selector');

        function getFirstOperatorValue() {
            return element('.bk-op-selector[ng-model="selectedFirstOperatorOption"] option[selected]').text();
        }

        function getSecondOperandInput() {
            return element(' input[ng-model="rangeDefinition.secondOperand"]');
        }

        function displayFirstOperandDatePicker(){
            callFunctionWithElement(null, function($body, appWindow, $){
                $(FIRST_INPUT_SELECTOR).datepicker('show');
            });
        }

        return {
            displayFirstOperandDatePicker: displayFirstOperandDatePicker,
            getFirstOperatorValue: getFirstOperatorValue,
            getSecondOperandInput: getSecondOperandInput
        };
    })();

    var checkboxFilters = (function() {
        var CONTENT_SELECTOR = '.bk-cb-filter-content';
        var CHECKBOX_TITLE_SELECTOR = '.bk-checkbox-title';
        var ALL_CHECKBOX_TITLE_SELECTOR = CONTENT_SELECTOR + ' ' + CHECKBOX_TITLE_SELECTOR;
        var SELECTED_CB_SECTION_SELECTOR = '.bk-selected-checkboxes';
        var SELECTED_CHECKBOX_TITLE_SELECTOR =  SELECTED_CB_SECTION_SELECTOR + ' '
            + CHECKBOX_TITLE_SELECTOR;
        var UNSELECTED_CB_SECTION_SELECTOR = '.bk-unselected-checkboxes';
        var UNSELECTED_CHECKBOX_TITLE_SELECTOR =  UNSELECTED_CB_SECTION_SELECTOR + ' '
            + CHECKBOX_TITLE_SELECTOR;
        var CHECKED_ITEM_SELECTOR = CONTENT_SELECTOR + ' .bk-checked';
        var CHECKBOX_CONTAINER_SELECTOR = CONTENT_SELECTOR + ' .bk-checkbox-container';
        var ADD_VALUES_IN_BULK_SELECTOR = '.bk-add-bulk-filter-link';
        var TOP_SELECTION_SELECTOR = CONTENT_SELECTOR + ' .bk-cb-filter-top-section .bk-section-control';
        var SELECTED_TAB_SELECTOR = contains(TOP_SELECTION_SELECTOR, 'SELECTED');
        var ALL_TAB_SELECTOR = contains(TOP_SELECTION_SELECTOR, 'ALL');

        function toggleCheckboxState(title) {
            var selector = contains(ALL_CHECKBOX_TITLE_SELECTOR, title);
            waitForAndClickElement(selector);
        }

        function waitForFilterCheckedItem(count) {
            waitForElementCountToBe(CHECKED_ITEM_SELECTOR, count);
        }

        function verifyCheckedState(title, isSelected) {
            var selector = contains(CHECKBOX_CONTAINER_SELECTOR, title);

            if (isSelected) {
                selector = selector + ' .bk-checked';
            }
            waitForElementCountToBe(selector, 1);
        }

        function openSelectedTab() {
            waitForAndClickElement(SELECTED_TAB_SELECTOR);
        }

        function openAllTab() {
            waitForAndClickElement(ALL_TAB_SELECTOR);
        }

        function setSearchText(text) {
            input('searchText').enter(text);
        }

        function verifyTooManyValues(isTrue) {
            var count = isTrue ? 1 : 0 ;
            waitForElementCountToBe('.bk-filter-too-many-values', count);
        }

        function verifyRefineUnselectedItemsMessage(isPresent) {
            var count = isPresent ? 1 : 0;
            waitForElementCountToBe('.bk-search-unselected-items-msg', count);
        }

        function verifySelectedFilterItemsCount(count) {
            waitForElementCountToBe(SELECTED_CHECKBOX_TITLE_SELECTOR, count);
        }

        function verifyUnselectedFilterItemsCount(count) {
            waitForElementCountToBe(UNSELECTED_CHECKBOX_TITLE_SELECTOR, count);
        }

        function verifyFilterItemsCount(count) {
            waitForElementCountToBe(ALL_CHECKBOX_TITLE_SELECTOR, count);
        }

        return {
            openBulkFilter: function () {
                waitForAndClickElement(ADD_VALUES_IN_BULK_SELECTOR);
            },
            toggleCheckboxState: toggleCheckboxState,
            waitForFilterCheckedItem: waitForFilterCheckedItem,
            verifyCheckedState: verifyCheckedState,
            openSelectedTab: openSelectedTab,
            openAllTab: openAllTab,
            setSearchText: setSearchText,
            verifyTooManyValues: verifyTooManyValues,
            verifyFilterItemsCount: verifyFilterItemsCount,
            verifyRefineUnselectedItemsMessage: verifyRefineUnselectedItemsMessage,
            verifySelectedFilterItemsCount: verifySelectedFilterItemsCount,
            verifyUnselectedFilterItemsCount: verifyUnselectedFilterItemsCount
        };
    })();

    var bulkFilters = (function(){
        var BULK_FILTER_SELECTOR = '.bk-bulk-filter';
        var selectors = {
            BULK_FILTER_SELECTOR: BULK_FILTER_SELECTOR,
            BULK_FILTER_TEXT_AREA_SELECTOR: BULK_FILTER_SELECTOR + ' textarea',
            UNMATCHED_VALUES_ERROR: '.bk-bulk-filter-unmatched-error',
            INVALID_VALUES_ERROR: '.bk-bulk-filter-invalid-values-error',
            ONE_TIME_LIMIT_ERROR: '.bk-bulk-filter-one-time-error',
            FILTER_VALUE_LIMIT_ERROR: '.bk-bulk-filter-limit-error',
            ADD_BUTTON: '.bk-bulk-filter-add-btn',
            CHECKBOX_ITEM: BULK_FILTER_SELECTOR + ' ' + CHECKBOX_ITEM_SELECTOR
        };

        function setTextAreaValue (text) {
            callFunctionWithElement(null, function($body, appWindow, $){
                var $elem = $(selectors.BULK_FILTER_TEXT_AREA_SELECTOR);
                $elem.val(text);
                $elem.trigger('change');
            });
        }

        function waitForTextAreaValueToBe(text) {
            return waitFor(function (appWindow) {
                return appWindow.$(selectors.BULK_FILTER_TEXT_AREA_SELECTOR).val() === text;
            }, 'waiting for bulk filter text value to be ' + text);
        }

        function waitForValidValues(count) {
            waitForElementCountToBe(selectors.CHECKBOX_ITEM, count);
        }

        function toggleCheckedState(name) {
            element(contains(selectors.CHECKBOX_ITEM, name)).click();
        }

        return {
            selectors: selectors,
            setTextAreaValue: setTextAreaValue,
            waitForTextAreaValueToBe: waitForTextAreaValueToBe,
            waitForValidValues: waitForValidValues,
            toggleCheckedState: toggleCheckedState
        };
    })();

    function waitForFilterPopup(columnName, aggr) {
        var selector = sageDataFilterPopupSelector(columnName, aggr);
        waitForElement(selector, 'waiting for filter popup for {1} {2}'.assign(aggr, columnName));
    }

    function waitForUnsupportedFilterPlaceHolder(){
        waitForElementCountToBe('.bk-unsupported-filter-placeholder', 1);
    }

    return {
        openFilter: function (title) {
            // expand the panel
            ensureFilterPanelIsOpened();
            element(filterTitle(title)).click();
            waitForFilterPopup(title);
        },
        waitForUnsupportedFilterPlaceHolder: waitForUnsupportedFilterPlaceHolder,
        rangeFilters: rangeFilters,
        dateFilters: dateFilters,
        checkboxFilters: checkboxFilters,
        bulkFilters: bulkFilters,
        clickDone: clickFilterDoneButton
    };
})();

function scrollContainerToBottom (selector) {
    callFunctionWithElement(null, function($body, appWindow, $){
        var $elem = $(selector)[0];
        $elem.scrollTop = $elem.scrollHeight;
    });
}

var tableFunctions = (function(){
    var TABLE_GRID_SELECTOR = '.bk-table .slick-viewport';
    var DOWNLOAD_MORE_SELECTOR = '.bk-link';
    var SHOW_UNDERLYING_DATA_SELECTOR = contains('.context-sub-menu-title-container', 'Show underlying data');

    function scrollToBottom () {
        scrollContainerToBottom(TABLE_GRID_SELECTOR);
    }

    function clickDownloadMore() {
        scrollToBottom();
        waitForElement(DOWNLOAD_MORE_SELECTOR);
        element(DOWNLOAD_MORE_SELECTOR).click();
    }

    function verifyTableColumnNameAtIndex(nameRegex, columnIndex) {
        expect(element(nth(TABLE_COLUMN_NAME, columnIndex)).text()).toMatch(nameRegex);
    }

    function getUnderlyingDataMenuItemSelector() {
        return SHOW_UNDERLYING_DATA_SELECTOR;
    }

    function showUnderlyingData() {
        rightClick(first(TABLE_ROW) + ' .slick-cell');
        element(getUnderlyingDataMenuItemSelector()).click();
    }

    function verifyData(rowIndex, columnIndex, text) {
        waitFor(function (appWindow) {
            var $rowAtIndex = appWindow.$(appWindow.$(TABLE_ROW)[rowIndex]);
            var $cellAtIndex = appWindow.$($rowAtIndex.find('.slick-cell')[columnIndex]);
            return $cellAtIndex.text() == text;
        }, 'waiting for correct table value');
    }

    return {
        scrollToBottom: scrollToBottom,
        clickDownloadMore: clickDownloadMore,
        verifyTableColumnNameAtIndex: verifyTableColumnNameAtIndex,
        getUnderlyingDataMenuItemSelector: getUnderlyingDataMenuItemSelector,
        showUnderlyingData: showUnderlyingData,
        verifyData: verifyData
    };
})();

var sageDataPanelFunctions = (function(){
    var COL_ITEM = '.bk-source-item .bk-columns-list .bk-column-item';
    var COLUMN_NAME_SELECTOR = '.bk-source-item .bk-columns-list .bk-column-item .bk-label.bk-column-name';
    var CHECKMARK_SELECTOR = '.bk-style-icon-checkmark';
    var REMOVE_COLUMN_SELECTOR = '.bk-style-icon-x';
    var FILTER_ICON_SELECTOR = '.bk-style-icon-filter';

    function waitForCheckMark(columnName, visible) {
        return waitFor(function(appWindow){
            var $ = appWindow.$;
            var column = $(contains(COLUMN_NAME_SELECTOR, columnName)).parent();
            var expectedDisplay = visible ? 'inline-block' : 'none';
            return $(column).find(CHECKMARK_SELECTOR).css('display') === expectedDisplay;
        }, 'waiting for check mark to show');
    }

    function removeColumn(columnName){
        callFunctionWithElement(null, function($body, appWindow, $) {
            var column = $(contains(COLUMN_NAME_SELECTOR, columnName)).parent();
            $(column).find(REMOVE_COLUMN_SELECTOR).click();
        });
    }

    function addColumn(columnName){
        callFunctionWithElement(null, function($body, appWindow, $) {
            $(contains(COLUMN_NAME_SELECTOR, columnName)).dblclick();
        });
    }

    function openFilter(columnName){
        columnName = columnName;
        waitForElement(contains(COLUMN_NAME_SELECTOR, columnName));
        callFunctionWithElement(null, function($body, appWindow, $) {
            var column = $(contains(COLUMN_NAME_SELECTOR, columnName)).parent();
            $(column).find(FILTER_ICON_SELECTOR).click();
        });
    }

    function openSource(name) {
        sageDataColumnSourceItem(name).click();
    }

    function waitForSourceToBeEnabled(sourceName) {
        return waitFor(function(appWindow) {
            // we want to check for the presence of the element AND the absence of the class
            var hasElement = (appWindow.$(contains(DATA_COLUMN_SOURCE_ITEM, sourceName)).length > 0);
            return hasElement && !appWindow.$(contains(DATA_COLUMN_SOURCE_ITEM, sourceName)).hasClass('bk-disabled');
        }, 'wait for source to be enabled', sourceName);
    }

    function waitForSourceToBeDisabled(sourceName) {
        return waitFor(function(appWindow) {
            return appWindow.$(contains(DATA_COLUMN_SOURCE_ITEM, sourceName)).hasClass('bk-disabled');
        }, 'wait for source to be disabled', sourceName);
    }

    function expectNumberOfColumnsPresentsInDomForSource(sourceName,numberOfColumns) {
        var selector = first(contains(DATA_COLUMN_SOURCE_ITEM, sourceName))+' li';
        waitForElement(selector);
        expect(element(selector).count()).toBe(numberOfColumns);
    }

    function expectColumnSampleValuesTipToContain(columnName, value) {
        var selector = contains(DATA_COLUMN_ITEM_CLICKABLE, columnName);
        var condition = callFunctionWithElement(element(selector), function($el, appWindow, $) {
            var tooltip = $el.attr('blink-tooltip');
            return tooltip.indexOf(value) > -1;
        });
        expect(condition).toBe(true);
    }

    function expectColumnsHiddenForSource(sourceName) {
        var selector = first(contains(DATA_COLUMN_SOURCE_ITEM, sourceName))+' .bk-list.ng-hide';
        expect(element(selector).count()).toBe(1);
    }

    function expectListHasNotScrolledToTop() {
        expect(getElementScrollTop(first(DATA_SOURCE_CONTAINER))).toBeGreaterThan(0);
    }

    function scrollToBottom() {
        scrollContainerToBottom(DATA_SOURCE_CONTAINER);
    }

    return {
        waitForCheckMark: waitForCheckMark,
        removeColumn: removeColumn,
        addColumn: addColumn,
        openSource: openSource,
        openFilter: openFilter,
        waitForSourceToBeEnabled: waitForSourceToBeEnabled,
        waitForSourceToBeDisabled: waitForSourceToBeDisabled,
        expectNumberOfColumnsPresentsInDomForSource: expectNumberOfColumnsPresentsInDomForSource,
        expectColumnsHiddenForSource: expectColumnsHiddenForSource,
        expectListHasNotScrolledToTop: expectListHasNotScrolledToTop ,
        expectColumnSampleValuesTipToContain:expectColumnSampleValuesTipToContain,
        scrollToBottom : scrollToBottom
    };

})();

var shareFunctions = (function() {
    var selectors = {
        SHARE_DIALOG: '.bk-share-dialog',
        SHARE_DIALOG_ADD_USER_SELECT: '.bk-share-dialog .bk-add-users .ui-select-search'
    };
    var sharePermissions = {
        CAN_VIEW: 'Can View',
        CAN_EDIT: 'Can Edit'
    };

    function addUserHeader() {
        return element(selectors.SHARE_DIALOG + ' .bk-add-users-header');
    }

    function permissionWithPrincipal(principalName) {
        return element(selectors.SHARE_DIALOG + ' .bk-permission-list ul li .bk-name:contains("'
            + principalName +'")');
    }

    function doneBtn() {
        return element(selectors.SHARE_DIALOG + ' .bk-done-btn');
    }

    function permissionItems() {
        return element(selectors.SHARE_DIALOG + ' .bk-permission-list ul li');
    }

    function nthPermissionItemName(nth) {
        return element(selectors.SHARE_DIALOG + ' .bk-permission-list ul li:nth(' + nth + ') .bk-name').text();
    }

    function nthPermissionType(nth) {
        return element(selectors.SHARE_DIALOG + ' .bk-permission-list ul li:nth(' + nth + ') select option:selected').text();
    }

    function addPermissionsBtn() {
        return element(selectors.SHARE_DIALOG + ' .bk-add-permissions-btn');
    }

    function shareAnswer(userName, readOnly, nthPermission) {
        if (!nthPermission) {
            nthPermission = 1;
        }

        var VIEW_PERMISSION_TYPE = (readOnly ? sharePermissions.CAN_VIEW  : sharePermissions.CAN_EDIT);
        shareBtn(true).click();
        expect(shareDialog().count()).toBe(1);
        // Click the add user header to expand the section
        addUserHeader().click();

        // Pick a user through the add user autocomplete input
        var chosenSelector = selectors.SHARE_DIALOG_ADD_USER_SELECT;
        selectUiSelectOption(chosenSelector , userName);
        // Give edit permissions
        /* global select */
        select('newPermissionType').option(VIEW_PERMISSION_TYPE);
        addPermissionsBtn().click();
        expect(nthPermissionItemName(nthPermission)).toBe(userName);
        doneBtn().click();
    }


    function createAReadonlyAnswer(userName, answerName, query) {
        createAndSaveAnswer(query, answerName);
        shareAnswer(userName, true);
    }

    function createAnEditableAnswer(userName, answerName, query) {
        createAndSaveAnswer(query, answerName);
        shareAnswer(userName, false);
    }

    return {
        addPermissionsBtn: addPermissionsBtn,
        addUserHeader: addUserHeader,
        createAReadonlyAnswer: createAReadonlyAnswer,
        createAnEditableAnswer: createAnEditableAnswer,
        doneBtn: doneBtn,
        selectors: selectors,
        nthPermissionItemName: nthPermissionItemName,
        nthPermissionType: nthPermissionType,
        permissionItems: permissionItems,
        permissionWithPrincipal: permissionWithPrincipal,
        shareAnswer: shareAnswer
    };
})();

var pinboardFunctions = (function(){
    var newPinboardModalNameSelector = '[ng-model="data.customData.pinboardName"]',
        vizContextCloseSelector = '.bk-viz-context .bk-close';
    var addToPBSelector = '.bk-answer-page .bk-title-panel .bk-add-to-pinboard';

    function openPinnerModal() {
        waitForAndClickElement(addToPBSelector);
    }

    function addFiltersSelector() {
        waitForAndClickElement(SHARABLE_PANEL_ACTION_BUTTON_DROPDOWN);
        return '.bk-action-dropdown .bk-add-filter';
    }

    function openAddFilterPanel() {
        waitForAndClickElement(addFiltersSelector());
    }

    function waitForNewPinboardModalNameInput(){
        waitForElement(newPinboardModalNameSelector);
    }

    function openVizContext(vizSelector, visibleOnly) {
        waitForAndClickElement(pinboardVizContextBtn(vizSelector, visibleOnly));
    }

    function closeVizContext() {
        waitForAndClickElement(vizContextCloseSelector);
    }

    function closeVizContextWithChanges(saveChanges) {
        closeVizContext();
        waitForElementCountToBe(DIALOG, 1);
        if (saveChanges) {
            primaryDialogBtn().click();
        } else {
            secondaryCancelBtn().click();
        }
        waitForElementCountToBe(DIALOG, 0);
    }

    return {
        waitForNewPinboardModalNameInput: waitForNewPinboardModalNameInput,
        openAddFilterPanel: openAddFilterPanel,
        openVizContext: openVizContext,
        closeVizContext: closeVizContext,
        closeVizContextWithChanges: closeVizContextWithChanges,
        openPinnerModal: openPinnerModal
    };
})();

var navigationFunctions = (function(){
    function goToPinboards() {
        pinboardsTab().click();
        waitForPath('/pinboards');
    }

    function goToAnswers(){
        answersTab().click();
        waitForPath('/answers');
    }

    return {
        goToPinboards: goToPinboards,
        goToAnswers: goToAnswers
    };
})();

var sharableItemPanelFunction = (function(){
    var RESET_LAYOUT_MENU_BUTTON = RESET_LAYOUT_BTN;
    var SAVE_MENU_BUTTON = SAVE_METADATA_BTN;
    var UPDATE_MENU_BUTTON = UPDATE_METADATA_BTN;
    var SAVE_UNTITLED_BUTTON = SAVE_UNTITLED_METADATA_BTN;
    var NAME_EDITOR = '.sharable-item-panel .bk-sharable-item-title .bk-description-edit-dropdown';
    var DESCRIPTION_EDITOR = '.sharable-item-panel .bk-sharable-item-title ' +
        '.bk-description-container .bk-description-editarea';
    var NAME_EDITOR_DONE_BUTTON = '.sharable-item-panel .bk-content-editable-done-button';
    var DROPDOWN_BTN = '.sharable-item-panel .bk-action-button-dropdown';


    function expectSaveUntitledButtonToBeActive(isInVizContext) {
        var dropDownBtn = (isInVizContext)
            ? getSelectorInVizContext(DROPDOWN_BTN)
            : DROPDOWN_BTN;
        waitForAndClickElement(dropDownBtn);
        var selector = SAVE_UNTITLED_BUTTON;
        waitForElementCountToBe(selector, 1);
        waitForAndClickElement(dropDownBtn);
    }

    function expectSaveMenuButtonToBeActive(isInVizContext) {
        var dropDownBtn = (isInVizContext)
            ? getSelectorInVizContext(DROPDOWN_BTN)
            : DROPDOWN_BTN;
        waitForAndClickElement(dropDownBtn);
        var selector = SAVE_MENU_BUTTON + ':not(.bk-disabled)';
        waitForElementCountToBe(selector, 1);
        waitForAndClickElement(dropDownBtn);
    }

    function expectUpdateMenuButtonToBeActive() {
        var dropDownBtn = getSelectorInVizContext(DROPDOWN_BTN);
        waitForAndClickElement(dropDownBtn);
        var selector = UPDATE_MENU_BUTTON + ':not(.bk-disabled)';
        waitForElementCountToBe(selector, 1);
        waitForAndClickElement(dropDownBtn);
    }

    function expectSaveMenuButtonToBeInactive(isInVizContext) {
        var dropDownBtn = (isInVizContext)
            ? getSelectorInVizContext(DROPDOWN_BTN)
            : DROPDOWN_BTN;
        waitForAndClickElement(dropDownBtn);
        var selector = SAVE_MENU_BUTTON + '.bk-disabled';
        waitForElementCountToBe(selector, 1);
        waitForAndClickElement(dropDownBtn);
    }

    // Expect the reset layout button to be visible
    function expectResetLayoutButtonToBeActive() {
        waitForAndClickElement(DROPDOWN_BTN);
        var selector = RESET_LAYOUT_MENU_BUTTON + ':not(.bk-disabled)';
        waitForElementCountToBe(selector, 1);
        waitForAndClickElement(DROPDOWN_BTN);
    }

    // Expect the reset layout button to be hidden
    function expectResetLayoutButtonToBeInactive() {
        waitForAndClickElement(DROPDOWN_BTN);
        var selector = RESET_LAYOUT_MENU_BUTTON + '.bk-disabled';
        waitForElementCountToBe(selector, 1);
        waitForAndClickElement(DROPDOWN_BTN);
    }

    function resetLayout(){
        element(RESET_LAYOUT_MENU_BUTTON).click();
    }

    function openNameDescriptionEditor() {
        element(NAME_EDITOR + ' .bk-editable-input').click();
    }

    function setDescription(description) {
        openNameDescriptionEditor();
        input('description').enter(description);
        callFunctionWithElement(
            element(DESCRIPTION_EDITOR),
            function($editor) {
                $editor.blur();
            }
        );
        element(NAME_EDITOR_DONE_BUTTON).click();
    }

    function getDescription() {
        openNameDescriptionEditor();
        return element(DESCRIPTION_EDITOR).val();
    }

    return {
        expectSaveUntitledButtonToBeActive: expectSaveUntitledButtonToBeActive,
        expectResetLayoutButtonToBeActive: expectResetLayoutButtonToBeActive,
        expectResetLayoutButtonToBeInactive: expectResetLayoutButtonToBeInactive,
        expectSaveMenuButtonToBeActive: expectSaveMenuButtonToBeActive,
        expectSaveMenuButtonToBeInactive: expectSaveMenuButtonToBeInactive,
        expectUpdateMenuButtonToBeActive: expectUpdateMenuButtonToBeActive,
        resetLayout: resetLayout,
        setDescription: setDescription,
        getDescription: getDescription
    };
})();

var dialogFunctions = (function(){
    function dialog() {
        return element('.bk-dialog');
    }

    function saveDialog() {
        return element('.bk-answer-save-dialog');
    }

    function shareDialog() {
        return element('.bk-share-dialog');
    }

    function primaryDialogBtn() {
        return element(PRIMARY_DIALOG_BUTTON_SELECTOR);
    }

    function secondaryDialogBtn() {
        return element('.bk-dialog .bk-btn-cancel');
    }

    function secondaryCancelBtn() {
        return element('.bk-dialog .bk-btn-secondary-cancel');
    }

    function dialogBody() {
        return element('.bk-dialog .modal-body');
    }
})();

var sageBarFunctions = (function(){
    var selectors = {
        SAGE_BUBBLE: '.bk-sage-bubble'
    };
    return {
        selectors: selectors
    };
})();

var worksheetFunctions = (function() {
    var JOIN_DIALOG = '.bk-dialog .bk-join-disambiguation',
        ADD_BUTTON_SELECTOR = '.bk-sage-data-columns .bk-add-columns-btn',
        SLICK_COLUMNS_TABLE = '.bk-worksheet-table',
        SLICK_COLUMN_ROW_SELECTOR = SLICK_COLUMNS_TABLE + ' .slick-row:not(.slick-group)',
        SLICK_COLUMN_ROW_COLUMN_NAME_SELECTOR =  SLICK_COLUMN_ROW_SELECTOR +  ' .slick-cell.column-name-cell',
        SLICK_COLUMN_ROW_COLUMN_NAME_EDITOR_SELECTOR = SLICK_COLUMN_ROW_COLUMN_NAME_SELECTOR + ' .editor-text',

        DELETE_BUTTON_SELECTOR = SLICK_COLUMNS_TABLE + ' .bk-style-icon-delete',

        SLICK_TABLE_ROW_SELECTOR = '.bk-worksheet-table .slick-row.slick-group',
        JOIN_DIALOG_OPTION_SELECTOR = JOIN_DIALOG + ' .bk-mjp-options .bk-clickable';

    var selectors = {
        slickColumnRowSelectors: SLICK_COLUMN_ROW_SELECTOR
    };

    function tableSelector(tableName) {
        return contains(DATA_COLUMN_SOURCE_ITEM, tableName);
    }

    function columnSelector(tableName, columnName) {
        return contains(tableSelector(tableName) + ' .bk-column-item span', columnName);
    }

    function slickColumnCheckboxSelector(columnName) {
        return contains(SLICK_COLUMN_ROW_SELECTOR, columnName) + ' input';
    }

    function worksheetTableHeaderSelector(source) {
        return '.bk-worksheet-table .slick-group-title:contains({1})'.assign(source);
    }

    function tableCollapsedArrowSelector(sourceName) {
        return tableSelector(sourceName) + ' .bk-arrow-collapsed';
    }

    function tableExpandedArrowSelector(sourceName) {
        return tableSelector(sourceName) + ' .bk-arrow-expanded';
    }

    function joinPathEditSelector(columnName) {
        return contains(SLICK_COLUMN_ROW_SELECTOR, columnName) + ' .bk-style-icon-link';
    }

    function columnNameCell(columnName) {
        return contains(SLICK_COLUMN_ROW_COLUMN_NAME_SELECTOR, columnName);
    }

    function editMetadataItemContaining(text) {
        dataTab().click();

        worksheetContaining(text).click();
        metadataEditBtn().click();
    }

    function openCreateWorksheet() {
        dataTab().click();

        // Click create worksheet button
        element(ACTION_BUTTON_DROPDOWN).click();
        createNewWorksheetBtn().click();
    }

    function selectSources(sourceNames, dontClearExisiting) {
        selectSourcesByName(sourceNames, dontClearExisiting);
    }

    function addAllColumnsForSource(source, doNotWait) {
        sageDataPanelFunctions.openSource(source);
        waitForAndClickElement(ADD_BUTTON_SELECTOR);
        if (!doNotWait) {
            waitFor(function (appWindow) {
                return appWindow.$(worksheetTableHeaderSelector(source)).length;
            }, 'waiting for column to show up' , 500);
        }
    }

    function openSource(sourceName) {
        element(tableCollapsedArrowSelector(sourceName)).click();
    }

    function closeSource(sourceName) {
        element(tableExpandedArrowSelector(sourceName)).click();
    }

    function addColumn(tableName, columnName) {
        callFunctionWithElement(null, function($body, appWindow, $) {
            var columnElement = $(columnSelector(tableName, columnName)),
                evt = $.Event('click', { target: columnElement });

            $('.ui-selectable').data('ui-selectable')._mouseStart(evt);
            $('.ui-selectable').data('ui-selectable')._mouseStart(evt);
            $('.ui-selectable').data('ui-selectable')._mouseStop(null);
        });
    }

    function deleteColumn(tableName, columnName) {
        element(slickColumnCheckboxSelector(tableName, columnName)).click();
        element(DELETE_BUTTON_SELECTOR).click();
    }

    function addColumnsBulk(tableName, columnNames) {
        callFunctionWithElement(null, function($body, appWindow, $) {
            columnNames.forEach(function(columnName) {
                var columnElement = $(columnSelector(tableName, columnName)),
                    evt = $.Event('click', { target: columnElement });
                evt.ctrlKey = true;

                $('.ui-selectable').data('ui-selectable')._mouseStart(evt);
                $('.ui-selectable').data('ui-selectable')._mouseStop(null);
            });
        });

        waitForAndClickElement(ADD_BUTTON_SELECTOR);
    }

    function chooseMapping(mappingName) {
        var mappingSelector = contains(JOIN_DIALOG_OPTION_SELECTOR, mappingName);
        waitForElement(mappingSelector);
        element(mappingSelector).click();
        primaryDialogBtn().click();
    }

    function waitForColumn(columnName) {
        waitForElement(contains(SLICK_COLUMN_ROW_SELECTOR, columnName));
    }

    function editJoinPath(columnName) {
        element(joinPathEditSelector(columnName)).click();
    }

    function renameColumn(originalName, newName) {
        element(columnNameCell(originalName)).click();
        element(SLICK_COLUMN_ROW_COLUMN_NAME_EDITOR_SELECTOR).val(newName);
        callFunctionWithElement(null, function($body){
            var $cell = $body.find(SLICK_COLUMN_ROW_COLUMN_NAME_EDITOR_SELECTOR);
            triggerKeyboardEvent($cell[0], 'keydown', 13);
            $cell.blur();
        });
        element(SLICK_COLUMNS_TABLE).click();
    }

    function saveWorksheet(name) {
        callFunctionWithElement(null, function($body, window, $){
            saveAsBtn().click();
            expect(saveDialog().count()).toBe(1);
            input('data.customData.questionHeader').enter(name);
            primaryDialogBtn().click();
            expect(saveDialog().count()).toBe(0);
        });
    }

    function makeACopy(name) {
        callFunctionWithElement(null, function($body, window, $){
            makeACopyBtn().click();
            expect(saveDialog().count()).toBe(1);
            input('data.customData.questionHeader').enter(name);
            primaryDialogBtn().click();
            expect(saveDialog().count()).toBe(0);
        });
    }

    return {
        selectors: selectors,
        editMetadataItemContaining: editMetadataItemContaining,
        openCreateWorksheet: openCreateWorksheet,
        selectSources: selectSources,
        addAllColumnsForSource: addAllColumnsForSource,
        openSource: openSource,
        closeSource: closeSource,
        addColumn: addColumn,
        deleteColumn: deleteColumn,
        addColumnsBulk: addColumnsBulk,
        chooseMapping: chooseMapping,
        waitForColumn: waitForColumn,
        editJoinPath: editJoinPath,
        renameColumn: renameColumn,
        saveWorksheet: saveWorksheet,
        makeACopy: makeACopy
    };
})();

var aggregatedWorksheetFunctions = (function(){
    function createAggregatedWorksheet(query, wsName) {
        sageInputElement().enter(query);
        waitForTableAnswerVisualizationMode();

        saveAsWorksheetBtn().click();
        expect(saveDialog().count()).toBe(1);
        var aggrWSName = wsName;
        input('data.customData.questionHeader').enter(aggrWSName);
        primaryDialogBtn().click();
    }

    return {
        createAggregatedWorksheet: createAggregatedWorksheet
    };
})();

var commonFunctions = (function(){
    var SAVE_BTN_SELECTOR = '.bk-dialog .bk-primary-button';

    function saveOnNavigateAway() {
        element(SAVE_BTN_SELECTOR).click();
    }

    return {
        saveOnNavigateAway: saveOnNavigateAway
    };
})();


var adminUIFunctions = (function() {
    var LIST_ITEM = '.bk-list-content li';
    var GROUP_PANEL_LIST_ITEM = '.bk-dialog .bk-tab-control .bk-checkbox-container';
    var NEW_USER_BTN_SELECTOR = '.bk-add-user-button';
    var NEW_ROLE_BTN_SELECTOR = '.bk-add-role-button';
    var NEW_GROUP_BTN_SELECTOR = '.bk-add-group-button';
    var SAVE_BTN_SELECTOR = '.bk-dialog .bk-primary-button';
    var CANCEL_BTN_SELECTOR = '.bk-dialog .bk-secondary-button';
    var DELETE_BTN_SELECTOR = '.bk-list-container .bk-action-container .bk-style-icon-delete';

    var PRIVILEGES_LIST_ITEM = '.bk-privileges-list .bk-checkbox-container';

    var DISPLAYNAME_SELECTOR = '[name="displayName"]';
    var USERNAME_SELECTOR = '[name="name"]';
    var PASSWORD_SELECTOR = '[name="password"]';
    var EMAIL_SELECTOR = '[name="email"]';
    var CONFIRM_PASSWORD_SELECTOR = '[name="confirmPassword"]';
    var GROUPNAME_SELECTOR = USERNAME_SELECTOR;
    var GROUPDISPLAYNAME_SELECTOR = DISPLAYNAME_SELECTOR;

    var ROLENAME_SELECTOR = USERNAME_SELECTOR;
    var ROLEDESCRIPTION_SELECTOR = '[name="description"]';
    var ROLEDISPLAYNAME_SELECTOR = DISPLAYNAME_SELECTOR;

    var NAME_ROW_SELECTOR = '.bk-name';
    var SELECT_ALL = '.bk-list-header .bk-checkbox-container';
    var CHECKBOX = '.bk-checkbox';
    var SEARCHBOX = '$ctrl.checkboxFilterSearchText';

    var CHECKED_CHECKBOX= CHECKBOX+'.bk-checked';

    var GROUPS_TAB_SELECTOR = 'li:contains("Manage Groups")';
    var USERS_TAB_SELECTOR = 'li:contains("Manage Users")';
    var ROLES_TAB_SELECTOR = 'li:contains("Manage Roles")';

    var PRIVILEGES = [
        'Has administration privileges',
        'Can upload user data',
        'Can download data',
        'Can share with all users',
        'Can manage data'
    ];

    function testIfAllCheckboxAreChecked() {
        return waitFor(function (appWindow) {
            var checked = '.bk-list-content ' + CHECKED_CHECKBOX;
            var all = '.bk-list-content ' + CHECKBOX;
            return appWindow.$(checked).length === appWindow.$(all).length;
        }, 'Waiting for checkboxes to be all checked', 200);
    }

    function updateField(selector, value) {
        callFunctionWithElement(element(selector), function($el, window, $){
            $el.focus();
            $el.val(value);
            $el.trigger('input');
            $el.trigger('blur');
        });
        // empty event loop to allow content editable to update
        callFunctionWithElement(null, angular.noop);
    }

    function addNewUser(displayName, username, password, clickAddBtn, dontConfirmPass, email, groups) {

        goToUserManagementPage();
        var confirmPass = password;
        if (!!dontConfirmPass) {
            confirmPass = '';
        }

        if (clickAddBtn) {
            element(NEW_USER_BTN_SELECTOR).click();
        }

        waitForElement('.bk-dialog', 'Waiting for dialog window');

        updateField(DISPLAYNAME_SELECTOR, displayName);
        updateField(USERNAME_SELECTOR, username);
        updateField(PASSWORD_SELECTOR, password);
        updateField(CONFIRM_PASSWORD_SELECTOR, confirmPass);

        if (email) {
            updateField(EMAIL_SELECTOR, email);
        }

        if (groups) {
            groups.forEach(function(groupName) {
                selectGroupInUserPanel(groupName);
            });
        }

        save();
    }

    function addNewGroup(groupName, groupDisplayName, privileges, users, filterUserText) {
        goToGroupManagement();
        element(NEW_GROUP_BTN_SELECTOR).click();

        waitForElement('.bk-dialog', 'Waiting for dialog window');
        updateField(GROUPNAME_SELECTOR, groupName);
        if (groupDisplayName) {
            updateField(GROUPDISPLAYNAME_SELECTOR, groupDisplayName);
        } else {
            updateField(GROUPDISPLAYNAME_SELECTOR, groupName);
        }
        if (privileges) {
            privileges.forEach(function(privilege) {
                element(contains(PRIVILEGES_LIST_ITEM, privilege)).click();
            });
        }

        if (users) {
            if (filterUserText) {
                typeInSearchBox(filterUserText);
            }
            users.forEach(function(user) {
                selectUserInGroupPanel(user);
            });
        }
        save();
    }

    function addNewRole(roleName, roleDisplayName, roleDescription) {
        element(NEW_ROLE_BTN_SELECTOR).click();
        waitForElement('.bk-dialog', 'Waiting for dialog window');
        updateField(ROLENAME_SELECTOR, roleName);
        updateField(ROLEDISPLAYNAME_SELECTOR, roleDisplayName);
        updateField(ROLEDESCRIPTION_SELECTOR, roleDescription);
        save();
    }

    function selectListItem(displayName) {
        element(contains(LIST_ITEM, displayName) + ' .bk-checkbox-container').click();
    }

    function deleteListItem(displayName) {
        selectListItem(displayName);
        element(DELETE_BTN_SELECTOR).click();
        save();
    }

    function clickOnRowWithName(name) {
        var childSelector = ' ' + NAME_ROW_SELECTOR;
        element(contains(LIST_ITEM, name) + childSelector).click();
    }

    function checkIfGroupHasUsersCheckedFirst(groupName) {
        clickOnRowWithName(groupName);
        element(USERS_TAB_SELECTOR).click();
        var checkbox = element('.bk-dialog .bk-tab-control .bk-checkbox-container:eq(0) .bk-checked');
        expect(checkbox.count()).toBe(1);
    }

    function checkIfUserHasRole(userName, roleName, mustHaveRole) {
        clickOnRowWithName(userName);
        element(ROLES_TAB_SELECTOR).click();
        checkIfCheckboxIsChecked(roleName, mustHaveRole);

        cancel();
    }
    function checkIfUserHasGroup(userName, groupName, mustHaveGroup) {
        clickOnRowWithName(userName);
        element(GROUPS_TAB_SELECTOR);
        checkIfCheckboxIsChecked(groupName, mustHaveGroup);
        cancel();
    }

    function checkIfGroupHasUser(userName, groupName, mustHaveUser) {
        clickOnRowWithName(groupName);
        element(USERS_TAB_SELECTOR).click();
        checkIfCheckboxIsChecked(userName, mustHaveUser);

        cancel();
    }

    function checkIfGroupHasRole(groupName, roleName, mustHaveRole) {
        clickOnRowWithName(groupName);
        element(ROLES_TAB_SELECTOR).click();
        checkIfCheckboxIsChecked(roleName, mustHaveRole);
        cancel();
    }

    function checkIfGroupHasGroup(groupName, belongingGroup, mustHaveGroup) {
        clickOnRowWithName(groupName);
        element(GROUPS_TAB_SELECTOR).click();

        checkIfCheckboxIsChecked(belongingGroup, mustHaveGroup);

        cancel();
    }

    function checkIfRoleHasGroup(roleName, groupName, mustHaveGroup) {
        clickOnRowWithName(roleName);

        checkIfCheckboxIsChecked(groupName, mustHaveGroup);
        cancel();
    }

    function checkIfRoleHasUser(roleName, userName, mustHaveUser) {
        clickOnRowWithName(roleName);
        element(USERS_TAB_SELECTOR).click();
        checkIfCheckboxIsChecked(userName, mustHaveUser);

        cancel();
    }

    function checkIfCheckboxIsChecked(checkboxName, isChecked) {
        waitForElement(GROUP_PANEL_LIST_ITEM, 'Waiting for checkbox to appear in panel');

        if (isChecked) {
            testForCheckedBox(checkboxName);
        } else {
            testForNonCheckedBox(checkboxName);
        }
    }

    function selectPrivileges(privilegeName) {
        element(contains(PRIVILEGES_LIST_ITEM, privilegeName)).click();
    }

    function selectGroupInUserPanel(groupName) {
        element(GROUPS_TAB_SELECTOR).click();
        selectItemInPanel(GROUP_PANEL_LIST_ITEM, groupName);
    }

    function selectGroupInGroupsPanel(groupName) {
        element(GROUPS_TAB_SELECTOR).click();
        selectItemInPanel(GROUP_PANEL_LIST_ITEM, groupName);
    }
    function selectUserInGroupPanel(userName) {
        element(USERS_TAB_SELECTOR).click();
        selectItemInPanel(GROUP_PANEL_LIST_ITEM, userName);
    }

    function selectGroupInRolesPanel(groupName) {
        element(GROUPS_TAB_SELECTOR).click();
        selectItemInPanel(GROUP_PANEL_LIST_ITEM, groupName);
    }

    function selectRoleInUserPanel(roleName) {
        element(ROLES_TAB_SELECTOR).click();
        selectItemInPanel(GROUP_PANEL_LIST_ITEM, roleName);
    }

    function selectRoleInGroupPanel(roleName) {
        element(ROLES_TAB_SELECTOR).click();
        selectItemInPanel(GROUP_PANEL_LIST_ITEM, roleName);
    }

    function selectUserInRolesPanel(userName) {
        element(USERS_TAB_SELECTOR).click();
        selectItemInPanel(GROUP_PANEL_LIST_ITEM, userName);
    }

    function selectItemInPanel(panelSelector, elementName) {
        panelItemSelector(panelSelector, elementName).click();
    }

    function panelItemSelector(panelSelector, elementName) {
        var checkboxSelector = ' ';
        return element(contains(panelSelector, elementName) + checkboxSelector);
    }

    function checkIfGroupHasPrivilege(privilegeName, mustHavePrivilege) {

        if (mustHavePrivilege) {
            testForCheckedBox(privilegeName);
        } else {
            testForNonCheckedBox(privilegeName);
        }
    }

    function findListItem(name) {
        var childSelector = ' ' + NAME_ROW_SELECTOR;
        return element(contains(LIST_ITEM, name) + childSelector);
    }
    function save() {
        element(SAVE_BTN_SELECTOR).click();
    }
    function enterName(name) {
        updateField(DISPLAYNAME_SELECTOR, name);
    }
    function enterGroupName(name) {
        updateField(GROUPDISPLAYNAME_SELECTOR, name);
    }
    function enterRoleName(name) {
        updateField(ROLENAME_SELECTOR, name);
    }
    function enterRoleDisplayName(name) {
        updateField(ROLEDISPLAYNAME_SELECTOR, name);
    }
    function enterRoleDescription(description) {
        updateField(ROLEDESCRIPTION_SELECTOR, description);
    }
    function openNewUserDialog() {
        element(NEW_USER_BTN_SELECTOR).click();
    }
    function cancel() {
        element(CANCEL_BTN_SELECTOR).click();
    }
    function selectAllUser() {
        goToUserManagementPage();
        element(SELECT_ALL).click();
    }
    function getListCheckboxes(checked){
        var selector = '.bk-list-content ';

        if (checked) {
            selector = selector + CHECKED_CHECKBOX;
        } else {
            selector = selector + CHECKBOX;
        }

        return element(selector);
    }

    function testForCheckedBox(checkboxName) {
        expect(element(contains('.bk-checkbox-container', checkboxName) + ' .bk-checked').count()).toBe(1);
    }

    function testForNonCheckedBox(checkboxName) {
        expect(element(contains('.bk-checkbox-container', checkboxName) + ' div:not(.bk-checked)').count()).toBeGreaterThan(0);
    }

    function clickUserTab() {
        element(USERS_TAB_SELECTOR).click();
    }

    function typeInSearchBox(filterText)
    {
        input(SEARCHBOX).enter(filterText);
    }

    return {
        addNewUser: addNewUser,
        addNewGroup: addNewGroup,
        addNewRole: addNewRole,
        checkIfGroupHasPrivilege: checkIfGroupHasPrivilege,
        checkIfRoleHasGroup: checkIfRoleHasGroup,
        checkIfRoleHasUser: checkIfRoleHasUser,
        checkIfUserHasGroup: checkIfUserHasGroup,
        checkIfUserHasRole: checkIfUserHasRole,
        checkIfGroupHasUser: checkIfGroupHasUser,
        checkIfGroupHasGroup: checkIfGroupHasGroup,
        checkIfGroupHasRole: checkIfGroupHasRole,
        checkIfGroupHasUsersCheckedFirst: checkIfGroupHasUsersCheckedFirst,
        clickUserTab: clickUserTab,
        deleteListItem: deleteListItem,
        enterName: enterName,
        enterGroupName: enterGroupName,
        enterRoleDescription: enterRoleDescription,
        enterRoleDisplayName: enterRoleDisplayName,
        enterRoleName: enterRoleName,
        findListItem: findListItem,
        getListCheckboxes: getListCheckboxes,
        openNewUserDialog: openNewUserDialog,
        privileges: PRIVILEGES,
        selectRoleInUserPanel: selectRoleInUserPanel,
        selectRoleInGroupPanel: selectRoleInGroupPanel,
        selectUserInGroupPanel: selectUserInGroupPanel,
        selectGroupInUserPanel: selectGroupInUserPanel,
        selectGroupInGroupsPanel: selectGroupInGroupsPanel,
        selectUserInRolesPanel: selectUserInRolesPanel,
        selectGroupInRolesPanel: selectGroupInRolesPanel,
        selectListItem: selectListItem,
        selectPrivileges: selectPrivileges,
        save: save,
        selectAllUser: selectAllUser,
        testIfAllCheckboxesAreChecked: testIfAllCheckboxAreChecked,
        testForCheckedBox: testForCheckedBox,
        testForNonCheckedBox: testForNonCheckedBox,
        typeInSearchBox: typeInSearchBox,
        cancel: cancel
    };

})();

var dataUIFunctions = (function(){
    var LIST_ITEM_SELECTOR = '.bk-metadata-list .bk-list-content .bk-name',
        METADATA_HEADER_SELECTOR = '.bk-explorer-table .bk-explorer-header',
        METADATA_GRID_SELECTOR = '.bk-explorer-table .grid-canvas',
        METADATA_GRID_HEADER_SELECTOR = '.slick-header-columns .slick-header-column',
        METADATA_GRID_ROW_SELECTOR = METADATA_GRID_SELECTOR + ' .ui-widget-content.slick-row',
        METADATA_GRID_CELL_VALUE_SELECTOR = METADATA_GRID_ROW_SELECTOR + ' .slick-cell .bk-value',
        METADATA_SAVE_BUTTON_SELECTOR = contains('.explorer-header-btns .bk-menu-btn:not(.bk-disabled)', 'Save'),
        METADATA_LIST_INPUT = 'listModel.searchText',
        EXPLORER_LIST_INPUT = 'explorer.tableFilter',
        NEXT_BUTTON = '.bk-pagination-btn.bk-next',
        PREVIOUS_BUTTON = '.bk-pagination-btn.bk-prev',
        LIST_TITLE = '.bk-list-bulk-actions .bk-title';

    var getDataExplorerTableSelector = function(tableName) {
        return contains('.bk-explorer .bk-content .bk-table-list .bk-table', tableName);
    };

    function goToNextPage() {
        element(NEXT_BUTTON).click();
    }

    function goToPreviousPage() {
        element(PREVIOUS_BUTTON).click();
    }

    function checkPagination(title) {
        expect(element(contains(LIST_TITLE, title)).count()).toBe(1);
    }

    function openLinkingPaneForTable(tableName) {
        searchMetadataItem(tableName);

        var tableSelector = getDataExplorerTableSelector(tableName) + ' div';
        waitForAndClickElement(tableSelector);
        waitForAndClickElement(SHOW_RELATIONSHIP_BUTTON);
    }

    function openColumnsForTable(tableName) {
        searchMetadataItem(tableName);

        var tableSelector = contains(LIST_ITEM_SELECTOR, tableName);
        waitForAndClickElement(tableSelector);
        waitForAndClickElement(SHOW_COLUMNS_BUTTON);
    }

    function openDataForTable(tableName) {
        searchMetadataItem(tableName);

        var tableSelector = contains(LIST_ITEM_SELECTOR, tableName);
        waitForAndClickElement(tableSelector);
        waitForAndClickElement(SHOW_DATA_BUTTON);
    }

    function openDependentsForTable(tableName) {
        searchMetadataItem(tableName);

        var tableSelector = contains(LIST_ITEM_SELECTOR, tableName);
        waitForAndClickElement(tableSelector);
        waitForAndClickElement(SHOW_DEPENDENTS_BUTTON);
    }

    function setMetadataCellValue(columnName, fieldName, value) {
        var fieldHeaderSelector = contains(
            METADATA_GRID_HEADER_SELECTOR,
            fieldName
        );

        var logicalTableColumnRowSelector = contains(
            METADATA_GRID_ROW_SELECTOR,
            columnName
        );

        callFunctionWithElement(null, function(appBody, appWindow, app$){
            var $fieldHeader = app$(fieldHeaderSelector);
            var columnIndex = $fieldHeader.index();
            var $columnRow = app$(logicalTableColumnRowSelector);

            var cellSelector = nthChild('.slick-cell', columnIndex + 2);
            var $cell = $columnRow.find(cellSelector);
            $cell.click().focus();
            $cell.find('input').val(value).blur();
            // blurs out the cell value input and enables the save button
            app$(METADATA_GRID_HEADER_SELECTOR).click().focus();
            app$(METADATA_SAVE_BUTTON_SELECTOR).click();
            waitForElement(SUCCESS_NOTIF);
        });
    }

    function typeInSearchBox(_input) {
        input(METADATA_LIST_INPUT).enter(_input);
        blinkInput('.bk-list-search input.bk-search-input').pressEnter();
    }

    function setColumnFormatPattern(column, formatPattern) {
        dataTab().click();
        openColumnsForTable('LINEORDER');
        setMetadataCellValue(column, 'Format Pattern', formatPattern);
    }

    return {
        checkPagination: checkPagination,
        goToNextPage: goToNextPage,
        goToPreviousPage: goToPreviousPage,
        openLinkingPaneForTable: openLinkingPaneForTable,
        openColumnsForTable: openColumnsForTable,
        openDataForTable: openDataForTable,
        openDependentsForTable: openDependentsForTable,
        setMetadataCellValue: setMetadataCellValue,
        setColumnFormatPattern: setColumnFormatPattern,
        typeInSearchBox: typeInSearchBox
    };
})();

var dropDownFunctions = (function(){
    var DISABLED_SELECTOR = '.bk-dropdown-item-disabled';
    var ITEM_SELECTOR = '.bk-dropdown-item';
    var DROPDOWN_BUTTON = '.bk-action-button-dropdown';

    function getItemSelector(itemText) {
        return ITEM_SELECTOR + (':contains({1})'.assign(itemText));
    }

    function clickOnItem(itemText) {
        element(getItemSelector(itemText)).click();
    }
    function checkItem(itemText, isDisabled) {
        if (isDisabled) {
            expect(element(getItemSelector(itemText)).count()).toBe(1);
            expect(element(getItemSelector(itemText) + DISABLED_SELECTOR).count()).toBe(1);
        } else {
            expect(element(getItemSelector(itemText)).count()).toBe(1);
            expect(element(getItemSelector(itemText) + DISABLED_SELECTOR).count()).toBe(0);
        }
    }
    function openDropdown(){
        element(DROPDOWN_BUTTON).click();
    }

    return {
        clickOnItem: clickOnItem,
        checkItem: checkItem,
        openDropdown: openDropdown
    };
})();

var filterPanelFunctions = (function(){
    var FILTER_PANEL_SELECTOR = '.bk-filter-panel';
    var FILTER_PANEL_ITEM_SELECTOR = FILTER_PANEL_SELECTOR + ' .bk-filter-list-item';
    var FILTER_PANEL_ITEM_TITLE_TEXT_SELECTOR = FILTER_PANEL_ITEM_SELECTOR + ' .filter-title-text';
    var FILTER_PANEL_POPOVER_SELECTOR = '.bk-filter-panel-popover';
    var CLOSE_ICON_SELECTOR = '.close-icon';


    function filterWithTitle(title) {
        return contains(FILTER_PANEL_ITEM_TITLE_TEXT_SELECTOR, title);
    }

    function clickFilterItem(title, isVizContext) {
        var filterItemSelector = contains(FILTER_PANEL_ITEM_TITLE_TEXT_SELECTOR, title);
        if (!!isVizContext) {
            filterItemSelector = getSelectorInVizContext(filterItemSelector);
        }
        waitForAndClickElement(filterItemSelector);
    }

    function waitForFilterItem(title, isVizContext) {
        var filterItemSelector = contains(FILTER_PANEL_ITEM_TITLE_TEXT_SELECTOR, title);
        if (!!isVizContext) {
            filterItemSelector = getSelectorInVizContext(filterItemSelector);
        }
        waitForElement(filterItemSelector, 'waiting for filter item to show in panel');
    }


    function waitForFilterPopover(isOpened) {
        var count = !!isOpened ? 1 : 0;
        waitForElementCountToBe(FILTER_PANEL_POPOVER_SELECTOR, count);
    }

    function waitForFilterItems(count) {
        waitForElementCountToBe(FILTER_PANEL_ITEM_SELECTOR, count);
    }

    function removeFilter(name) {
        var selector = contains(FILTER_PANEL_ITEM_SELECTOR, name) + ' ' + CLOSE_ICON_SELECTOR;
        element(selector).click();
    }

    return {
        clickFilterItem: clickFilterItem,
        filterWithTitle: filterWithTitle,
        waitForFilterPopover: waitForFilterPopover,
        waitForFilterItems: waitForFilterItems,
        waitForFilterItem: waitForFilterItem,
        removeFilter: removeFilter
    };
})();

function updateInputValue(selector, val) {
    callFunctionWithElement(null, function($body, appWindow, jQ){
        var inputEl = appWindow.$(selector);
        inputEl.val(val);
        inputEl.trigger('change');
    });
}

var checkboxFilterFunctions = (function(){
    function CBItemSelector(name, isSelected) {
        var filterItem = CB_FILTER_TITLE;

        if (isSelected) {
            filterItem += '.bk-selected';
        }
        return contains(filterItem, name);
    }

    function setSearchBarValue(val) {
        return updateInputValue(CHECKBOX_FILTER_SEARCH, val);
    }

    function waitForSampleValue(val) {
        return waitForElement(
            contains(FILTER_SAMPLE_VALUES, val),
            'Waiting for sample value'
        );
    }

    return {
        CBItemSelector: CBItemSelector,
        setSearchBarValue: setSearchBarValue,
        waitForSampleValue: waitForSampleValue
    };
})();

function interceptFormSubmit(formSelector, successCallback, errorCallback, sendAsMultiPart) {
    function submitForm(form, $, onSuccess, onError) {
        var data = !!sendAsMultiPart ? new FormData() : {};
        for (var i=0; i<form.length; ++i) {
            var element = form[i];
            if (!!sendAsMultiPart) {
                data.append(element.name, element.value);
            } else {
                data[element.name] = element.value;
            }
        }

        var params = {
            type: form.method,
            url: form.action,
            data: data,
            success: onSuccess,
            error: onError
        };

        if (!!sendAsMultiPart) {
            params.contentType = false;
            params.type = 'POST';
            params.processData = false;
            params.cache = false;
        }

        $.ajax(params);
    }

    callFunctionWithElement(null, function($body, appWindow, $){
        var originalSubmitMethod;
        if (!!formSelector) {
            var form = appWindow.document.querySelector(formSelector);
            originalSubmitMethod = form.submit;
            form.submit = function () {
                form.submit = originalSubmitMethod;
                submitForm(this, $, successCallback, errorCallback);
            };
        } else {
            originalSubmitMethod = appWindow.HTMLFormElement.prototype.submit;
            appWindow.HTMLFormElement.prototype.submit = function(){
                appWindow.HTMLFormElement.prototype.submit = originalSubmitMethod;
                submitForm(this, $, successCallback, errorCallback);
            };
        }
    });
}


